(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{367:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"大话数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大话数据结构"}},[t._v("#")]),t._v(" 大话数据结构")]),t._v(" "),a("h2",{attrs:{id:"数据结构绪论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构绪论"}},[t._v("#")]),t._v(" 数据结构绪论")]),t._v(" "),a("h3",{attrs:{id:"时间复杂度比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度比较"}},[t._v("#")]),t._v(" 时间复杂度比较")]),t._v(" "),a("p",[t._v("O(1)<O(logn)<O(n)<O(nlogn)<O(n"),a("sup",[t._v("2")]),t._v(")<O(n"),a("sup",[t._v("3")]),t._v(")<O(2"),a("sup",[t._v("n")]),t._v(")<O(n!)<O(n"),a("sup",[t._v("n")]),t._v(")")]),t._v(" "),a("h2",{attrs:{id:"线性表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[t._v("#")]),t._v(" 线性表")]),t._v(" "),a("h3",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("p",[t._v("零个或多个数据元素的有限排列")]),t._v(" "),a("p",[t._v("是一个序列。第一个元素无前驱，，最后一个元素无后继，其他每个元素都有且只有一个前驱和后继")]),t._v(" "),a("p",[t._v("线性表元素个数n(n>=0)定义为线性表的长度，当n=0时，称为空表。")]),t._v(" "),a("h3",{attrs:{id:"线性表的抽象数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的抽象数据类型"}},[t._v("#")]),t._v(" 线性表的抽象数据类型")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("ADT 线性表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nData\n  \t线性表的数据对象集合为"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("an"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，每个元素的类型均为DataType。其中，出第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。\nOperation\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t\t初始化操作，建立一个空的线性表L。\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListEmpty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t\t若线性表为空，返回true，否则返回false。\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ClearList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t\t将线性表清空。\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t将线性表L中的第i个元素值返回给e。\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LocateELem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("表示失败。\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t在线性表L中第i个位置插入新元素e。\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LisrDelete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("删除线性表L中第i个位置元素，并用e返回其值。\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\t\t返回线性表L的元素个数。\nendADT\n")])])]),a("h3",{attrs:{id:"线性表的顺序存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的顺序存储结构"}},[t._v("#")]),t._v(" 线性表的顺序存储结构")]),t._v(" "),a("h4",{attrs:{id:"定义-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义-2"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("p",[t._v("线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("MAXSIZE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\t\t\t\t")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//存储空间初始分配量")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ElementType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ElemType类型根据实际情况而定，这里假设为int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tElementType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//数组存储数据元素，最大值为MAXSIZE")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线性表当前长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("SqList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("线性表的三个属性：起始位置，最大存储容量，长度")]),t._v(" "),a("h4",{attrs:{id:"获得元素操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获得元素操作"}},[t._v("#")]),t._v(" 获得元素操作")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("OK "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("ERROR "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("TRUE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("FALSE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" Status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数的类型，其值是函数结果状态返回代码，如OK")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取元素操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始条件：顺序线性表L已存在，1<=i<=ListLength(L)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//操作结果：用e返回L中第i个数据元素的值")]),t._v("\nStatus "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SqList L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i，ElementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注：这里返回值类型是Status是一个整形，返回OK代表1，ERROR代表0。之后代码中出现就不再详述。")]),t._v(" "),a("h4",{attrs:{id:"插入操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入操作"}},[t._v("#")]),t._v(" 插入操作")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果插入位置不合理，抛出异常")])]),t._v(" "),a("li",[a("p",[t._v("线性表长度大于等于数组长度，抛出异常或动态增加容量")])]),t._v(" "),a("li",[a("p",[t._v("从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置")])]),t._v(" "),a("li",[a("p",[t._v("将要插入元素填入位置i处")])]),t._v(" "),a("li",[a("p",[t._v("表长加1")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("初始条件：顺序线性表L已存在，"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n操作结果：在L中第i个位置之前插入新的元素e，L的长度加"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\nStatus "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SqList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ElementType e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("MAXSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//顺序线性表已满")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当i不在范围内时")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//若插入数据位置不在末尾")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//插入新元素")]),t._v("\n\tL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"删除操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除操作"}},[t._v("#")]),t._v(" 删除操作")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("位置不合理，抛出异常")])]),t._v(" "),a("li",[a("p",[t._v("取出删除元素")])]),t._v(" "),a("li",[a("p",[t._v("从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置")])]),t._v(" "),a("li",[a("p",[t._v("表长减1")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("初始条件：顺序线性表L已存在，"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nStatus "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListDelete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SqList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ElementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\tL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"线性表的链式存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的链式存储结构"}},[t._v("#")]),t._v(" 线性表的链式存储结构")]),t._v(" "),a("p",[t._v("​\t为了表示每个数据元素a"),a("sub",[t._v("i")]),t._v("与其直接后继元素a"),a("sub",[t._v("i+1")]),t._v("之间的逻辑关系，对数据元素a"),a("sub",[t._v("i")]),t._v("来说，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息（即直接后继的存储位置）。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域，指针域中存储的信息称作指针或链。这两部分信息组成的数据元素a"),a("sub",[t._v("i")]),t._v("的存储映像，称为结点（Node）。")]),t._v(" "),a("p",[t._v("​\tn个结点（a"),a("sub",[t._v("i")]),t._v("的存储映像）链结成一个链表，即为线性表（a"),a("sub",[t._v("1")]),t._v(",a"),a("sub",[t._v("2")]),t._v(",...,a"),a("sub",[t._v("n")]),t._v("）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。")]),t._v(" "),a("p",[t._v("链表中的第一个结点的存储位置叫做头指针。")]),t._v(" "),a("p",[t._v("最后一个结点的指针为“空”（通常用NULL或”^”符号表示）")]),t._v(" "),a("p",[t._v("为了更加方便地对链表进行操作，会在单链表的第一个结点前附设一个节点，称为头节点。头节点的数据域可以不存储任何信息，也可以存储如线性表的长度等附加信息，指针域存储指向第一个结点的指针。")]),t._v(" "),a("h4",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("线性表的单链表存储结构\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("LinkList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义LinkList")]),t._v("\n")])])]),a("h4",{attrs:{id:"单链表的读取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表的读取"}},[t._v("#")]),t._v(" 单链表的读取")]),t._v(" "),a("p",[t._v("获得链表第i个数据的算法思路：")]),t._v(" "),a("ul",[a("li",[t._v("声明一个结点p指向链表的第一个结点，初始或j从1开始")]),t._v(" "),a("li",[t._v("当j<i时，就遍历链表，让p的指针向后移动，不断指向下一节点，j累加1")]),t._v(" "),a("li",[t._v("若到链表末尾p为空，则说明第i个元素不存在")]),t._v(" "),a("li",[t._v("否则查找成功，返回结点p的数据")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("初始条件：顺序线性表L已存在，"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n操作结果：用e返回L中第i个元素的值\nStatus "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetELem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkList L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LinkList p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"单链表的插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表的插入"}},[t._v("#")]),t._v(" 单链表的插入")]),t._v(" "),a("p",[t._v("单链表第i个数据插入结点的算法思路：")]),t._v(" "),a("ul",[a("li",[t._v("声明一结点p指向链表的第一个结点，初始化j从1开始")]),t._v(" "),a("li",[t._v("当j<i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1")]),t._v(" "),a("li",[t._v("若到链表末尾p为空，则说明第i个元素不存在")]),t._v(" "),a("li",[t._v("否则查找成功，在系统中生成一个空结点s")]),t._v(" "),a("li",[t._v("将数据e赋值给s->data")]),t._v(" "),a("li",[t._v("单链表的插入标准语句s->next=p->next;p->next=s;")]),t._v(" "),a("li",[t._v("返回成功")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("初始条件：顺序线性表L已存在，"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n操作结果：在L中第i个位置之前插入新的元素e，L的长度加"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nStutus "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListInsert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ElemType e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LinkList p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"单链表的删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表的删除"}},[t._v("#")]),t._v(" 单链表的删除")]),t._v(" "),a("p",[t._v("单链表第i个数据删除结点的算法思路：")]),t._v(" "),a("ul",[a("li",[t._v("声明一结点p指向链表的第一个结点，初始化j从1开始")]),t._v(" "),a("li",[t._v("当j<i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1")]),t._v(" "),a("li",[t._v("若到链表末尾p为空，则说明第i个元素不存在")]),t._v(" "),a("li",[t._v("否则查找成功，将欲删除的结点p->next赋值给q")]),t._v(" "),a("li",[t._v("单链表的删除标准语句p->next=q->next;")]),t._v(" "),a("li",[t._v("将q结点中的数据赋值给e，作为返回")]),t._v(" "),a("li",[t._v("释放q结点")]),t._v(" "),a("li",[t._v("返回成功")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("初始条件：顺序线性表L已存在，"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nStatus "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListDelete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LinkList p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("L"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"二叉树的性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的性质"}},[t._v("#")]),t._v(" 二叉树的性质")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在二叉树的第i层上至多有2"),a("sup",[t._v("i-1")]),t._v("个结点(i>=1)")])]),t._v(" "),a("li",[a("p",[t._v("深度为k的二叉树至多有2"),a("sup",[t._v("k")]),t._v("-1个结点(k>=1)")])]),t._v(" "),a("li",[a("p",[t._v("对任何一棵二叉树T，如果其终端结点数n"),a("sub",[t._v("0")]),t._v("，度为2的结点数位n"),a("sub",[t._v("2")]),t._v("，则n"),a("sub",[t._v("0")]),t._v("=n"),a("sub",[t._v("2")]),t._v("+1")])]),t._v(" "),a("li",[a("p",[t._v("具有n个结点的完全二叉树的深度为log"),a("sub",[t._v("2")]),t._v("n」+1（不大于x的最大整数）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果对一棵有 n 个结点的完全二叉树(其深度为[log (2) n] + 1) 的结点按层序编号(从第1层到第[log (2) n] + 1 层,每一层从左到右),对任一结点i (1 <= i <= n) 有:")])]),t._v(" "),a("li",[a("p",[t._v(",lo如果 i = 1 ,则结点i是二叉树的根,无双亲;如果i > 1,则其双亲是结点 [ i /2 ];")])]),t._v(" "),a("li",[a("p",[t._v("如果2i > n,则结点i无左孩子(结点i为叶子结点);否则其左孩子是结点2i;")])]),t._v(" "),a("li",[a("p",[t._v("如果2i +1 > n,则结点i无右孩子;否则其右孩子是结点2i +1;")])])])])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include<iostream>\nusing namespace std;\nstruct node\n{\n\tchar data;\n\tnode* left=nullptr;\n\tnode* right=nullptr;\n};\nvoid CreateBitree(node* &root);\nvoid PreOrderTraverse(node* root);\nvoid InOrderTraverse(node* root);\nvoid PostOrderTraverse(node* root);\nint main()\n{\nrt\n\t//AB#D##C##\n\tnode* root=new node;\n\tCreateBitree(root);\n\tPreOrderTraverse(root);\n\tcout << endl;\n\tInOrderTraverse(root);\n\tcout << endl;\n\tPostOrderTraverse(root);\n\tcout << endl;\n}\nvoid CreateBitree(node* &root)\n{\n\tchar c;\n\tcin >> c;\n\tif (c == '#')\n\t\treturn;\n\telse\n\t{\n\t\troot = new node;\n\t\troot->data = c;\n\t\troot->left = nullptr;\n\t\troot->right = nullptr;\n\t\tCreateBitree(root->left);\n\t\tCreateBitree(root->right);\n\t}\n}\nvoid PreOrderTraverse(node* root)\n{\n\tif (!root)\n\t\treturn;\n\tcout << root->data;\n\tPreOrderTraverse(root->left);\n\tPreOrderTraverse(root->right);\n}\nvoid InOrderTraverse(node* root)\n{\n\tif (!root)\n\t\treturn;\n\tInOrderTraverse(root->left);\n\tcout << root->data;\n\tInOrderTraverse(root->right);\n}\nvoid PostOrderTraverse(node* root)\n{\n\tif (!root)\n\t\treturn;\n\tPostOrderTraverse(root->left);\n\tPostOrderTraverse(root->right);\n\tcout << root->data;\n}\n\n")])])]),a("p",[t._v("无向边用()表示，有向边用<>表示")]),t._v(" "),a("h3",{attrs:{id:"树的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的概念"}},[t._v("#")]),t._v(" 树的概念")]),t._v(" "),a("h4",{attrs:{id:"一-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-定义"}},[t._v("#")]),t._v(" 一. 定义:")]),t._v(" "),a("p",[t._v("D是具有相同特性的数据元素的集合,如果D是一个空集则称为空树.")]),t._v(" "),a("p",[t._v("否则:")]),t._v(" "),a("ol",[a("li",[t._v("在D中存在唯一称为根的数据元素"),a("code",[t._v("root")])]),t._v(" "),a("li",[t._v("当n>1时,其余结点可以分为T~1~,T~2~…T~n~,其中每个子集本身又是符合本结点的树,成为root的根子节点.")])]),t._v(" "),a("h4",{attrs:{id:"二-基本术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-基本术语"}},[t._v("#")]),t._v(" 二.基本术语")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("结点")]),t._v("\n数据元素+若干指向子树的分支")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("结点的度")]),t._v("\n分支的个数")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("树的度")]),t._v("\n树中所有结点的度的最大值")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("叶子结点")])]),t._v(" "),a("p",[t._v("度为0的结点")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("分支结点")])]),t._v(" "),a("p",[t._v("度大于0的结点")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("结点的层次")])]),t._v(" "),a("p",[t._v("假设根结点的层次为1,第l层结点的层次为l+1")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("树的深度")])]),t._v(" "),a("p",[t._v("树中叶子节点所在的最大的层数称为树的"),a("strong",[t._v("深度")]),t._v(".简称为树的"),a("strong",[t._v("深")]),t._v(",也称为树的"),a("strong",[t._v("高度")]),t._v(",也可以简称树的"),a("strong",[t._v("高")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("森林")]),t._v("\n是m($m\\ge0$)棵互不相交的树的集合.")]),t._v(" "),a("p",[t._v("在任何一棵非空树是一个二元组\n$Tree = (root , F)$")]),t._v(" "),a("p",[t._v("其中"),a("code",[t._v("root")]),t._v("被称为根节点")]),t._v(" "),a("p",[a("code",[t._v("F")]),t._v("被称为子树森林")])])]),t._v(" "),a("h4",{attrs:{id:"三-二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-二叉树"}},[t._v("#")]),t._v(" 三.二叉树")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("二叉树的定义")])]),t._v(" "),a("p",[a("strong",[t._v("二叉树")]),t._v("或为"),a("strong",[t._v("空树")]),t._v(",或是由一个"),a("strong",[t._v("根节点")]),t._v("加上两颗分别称为"),a("strong",[t._v("左子树")]),t._v("和"),a("strong",[t._v("右子树")]),t._v("的两个"),a("strong",[t._v("互不交叉")]),t._v("的二叉树组成.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("二叉树的主要操作")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("二叉树的性质")])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);