(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{375:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据结构-学校"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-学校"}},[t._v("#")]),t._v(" 数据结构（学校）")]),t._v(" "),a("p",[t._v("hliu@hrbust.edu.cn")]),t._v(" "),a("p",[t._v("wx:vinceblogger")]),t._v(" "),a("p",[t._v("E1126")]),t._v(" "),a("p",[t._v("数据挖掘与")]),t._v(" "),a("p",[t._v("模糊逻辑")]),t._v(" "),a("h2",{attrs:{id:"第一章-绪论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章-绪论"}},[t._v("#")]),t._v(" 第一章 绪论")]),t._v(" "),a("h3",{attrs:{id:"数据结构的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构的概念"}},[t._v("#")]),t._v(" 数据结构的概念")]),t._v(" "),a("p",[t._v("对于数值计算问题的解决方法，主要是用数学方程建立数学模型")]),t._v(" "),a("p",[t._v("非数值计算问题，主要采用数据结构的方法建立数学模型")]),t._v(" "),a("p",[t._v("数据结构的研究范畴主要是非数值计算问题的操作对象及其它们之间的关系以及在计算机中的表示和实现。")]),t._v(" "),a("h3",{attrs:{id:"数据结构的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构的基本概念"}},[t._v("#")]),t._v(" 数据结构的基本概念")]),t._v(" "),a("h4",{attrs:{id:"数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据"}},[t._v("#")]),t._v(" 数据")]),t._v(" "),a("p",[t._v("数据是信息的载体，是描述客观事物的数、字符、以及所有能输入到计算机中，被计算机程序识别和处理的符号的集合")]),t._v(" "),a("ul",[a("li",[t._v("数值性数据")]),t._v(" "),a("li",[t._v("非数值性数据")])]),t._v(" "),a("h4",{attrs:{id:"数据元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据元素"}},[t._v("#")]),t._v(" 数据元素")]),t._v(" "),a("ul",[a("li",[t._v("数据的基本单位。在计算机程序中常作为一个整体进行考虑和处理")]),t._v(" "),a("li",[t._v("有时一个数据元素可以由若干数据项(Data Item)组成。数据元素又称为元素、结点、记录")])]),t._v(" "),a("h4",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),a("p",[t._v("定义：由某一数据元素的集合及该集合中所有数据元素之间的关系组成")]),t._v(" "),a("p",[t._v("记DataStructure= (D, S)")]),t._v(" "),a("p",[t._v("其中，D是某一数据元素的有限集合，S是该集合中所有数据元素之间的关系组成的有限集合")]),t._v(" "),a("h4",{attrs:{id:"数据的逻辑结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据的逻辑结构"}},[t._v("#")]),t._v(" "),a("strong",[t._v("数据的逻辑结构")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数据的逻辑结构从逻辑关系上描述数据，与数据的存储无关")])]),t._v(" "),a("li",[a("p",[t._v("数据的逻辑结构可以看作是从具体问题抽象出来的数学模型")])])]),t._v(" "),a("p",[t._v("数据的逻辑结构可归结为以下四类")]),t._v(" "),a("ul",[a("li",[t._v("线性结构\n"),a("ul",[a("li",[t._v("一对一")]),t._v(" "),a("li",[t._v("第一个结点无前驱")]),t._v(" "),a("li",[t._v("最后一个节点无后继")])])])]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph LR\nA(A)--\x3eB(B)--\x3eC(C)--\x3eD(D)--\x3eE(E)\n")])])]),a("ul",[a("li",[a("p",[t._v("树形结构")]),t._v(" "),a("ul",[a("li",[t._v("一对多")]),t._v(" "),a("li",[a("code",[t._v("<A,B>")]),t._v("有向，"),a("code",[t._v("(C,D)")]),t._v("无向")])])])]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph TD\nA(A)\nB(B)\nC(C)\nD(D)\nE(E)\nF(F)\nG(G)\nA--\x3eB\nA--\x3eC\nA--\x3eD\nC--\x3eE\nC--\x3eF\nE--\x3eG\n")])])]),a("ul",[a("li",[t._v("图状结构\n"),a("ul",[a("li",[t._v("多对多")])])])]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph LR\nA(A)\nB(B)\nC(C)\nD(D)\nE(E)\nA--\x3eB\nA--\x3eC\nC--\x3eD\nD--\x3eB\nE--\x3eB\n")])])]),a("ul",[a("li",[t._v("集合结构")])]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph TD\nA(A)\nB(B)\nC(C)\n")])])]),a("h4",{attrs:{id:"数据的存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据的存储结构"}},[t._v("#")]),t._v(" 数据的存储结构")]),t._v(" "),a("ul",[a("li",[t._v("数据的存储结构是逻辑结构用计算机语言的实现")]),t._v(" "),a("li",[t._v("数据的存储结构依赖于计算机语言\n"),a("ul",[a("li",[t._v("顺序存储结构")]),t._v(" "),a("li",[t._v("链式存储结构")])])])]),t._v(" "),a("h5",{attrs:{id:"顺序存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序存储"}},[t._v("#")]),t._v(" 顺序存储")]),t._v(" "),a("p",[t._v("所有元素存放在一片连续的存储单元中，逻辑上相邻的元素存放到计算机内存仍然相邻")]),t._v(" "),a("h5",{attrs:{id:"链式存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式存储"}},[t._v("#")]),t._v(" 链式存储")]),t._v(" "),a("p",[t._v("所有元素存放在可以不连续的存储单元中，但元素之间的关系可以通过地址确定，逻辑上相邻的元素存放到计算机内存后不一定是相邻的")]),t._v(" "),a("h4",{attrs:{id:"抽象数据类型及其实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象数据类型及其实现"}},[t._v("#")]),t._v(" 抽象数据类型及其实现")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数据类型\n一组性质相同的值的集合, 以及定义于这个值集合上的一组操作的总称")]),t._v(" "),a("ul",[a("li",[t._v("构造数据类型由不同成员构成")]),t._v(" "),a("li",[t._v("基本数据类型可以看作是计算机中已实现的数据类型")])])]),t._v(" "),a("li",[a("p",[t._v("抽象数据类型 ADT: Abstract Data Type)")]),t._v(" "),a("p",[t._v("是指一个数学模型以及定义在此数学模型上的一组操作。")]),t._v(" "),a("ul",[a("li",[t._v("两个重要特征\n"),a("ul",[a("li",[t._v("抽象性\n"),a("ul",[a("li",[t._v("用ADT描述程序处理的实体时，强调的是其本质的特征、其所能完成的功能以及它和外部用户的接口（即外界使用它的方法）")])])]),t._v(" "),a("li",[t._v("封装性\n"),a("ul",[a("li",[t._v("将实体的外部特性和其内部实现细节分离，并且对外部用户隐藏其内部实现细节")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("抽象数据类型的表示和实现")]),t._v(" "),a("ul",[a("li",[t._v("抽象数据类型需要通过固有数据类型(高级编程语言中已实现的数据类型)来实现，本课程中由类模板或类来实现。")])])])]),t._v(" "),a("h3",{attrs:{id:"算法和算法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法和算法分析"}},[t._v("#")]),t._v(" 算法和算法分析")]),t._v(" "),a("h4",{attrs:{id:"算法定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法定义"}},[t._v("#")]),t._v(" 算法定义")]),t._v(" "),a("p",[t._v("算法是为了解决某类问题而规定的一个有限长的操作序列")]),t._v(" "),a("h5",{attrs:{id:"算法应具有的性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法应具有的性质"}},[t._v("#")]),t._v(" 算法应具有的性质")]),t._v(" "),a("ul",[a("li",[t._v("正确性")]),t._v(" "),a("li",[t._v("具体性")]),t._v(" "),a("li",[t._v("确定性")]),t._v(" "),a("li",[t._v("有限性")]),t._v(" "),a("li",[t._v("可读性")]),t._v(" "),a("li",[t._v("健壮性")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("正确性")]),t._v(" "),a("p",[t._v("正确性指必须完成所期望的功能，对算法是否“正确”的理解可以有如下四个层次：")]),t._v(" "),a("ul",[a("li",[t._v("程序中不含任何语法错误。")]),t._v(" "),a("li",[t._v("程序对于几组输入数据能够得出满足要求的结果。")]),t._v(" "),a("li",[t._v("程序对于精心选择的、典型的、苛刻的并带有刁难性的几组输入数据能够得出满足要求的结果。")]),t._v(" "),a("li",[t._v("程序对于一切输入数据都能得出满足要求的结果。")])])]),t._v(" "),a("li",[a("p",[t._v("具体性")]),t._v(" "),a("p",[t._v("一个算法必须由一系列具体操作组成，这时的“具体”指的所有操作都必须经过已实现的基本操作有限次来实现，并且所有操作都是可读的、可执行的，每一操作必须在有限时间内完成。")])]),t._v(" "),a("li",[a("p",[t._v("确定性")]),t._v(" "),a("p",[t._v("算法中的所有操作都必须有确切的含义，不能产生歧义，算法的执行者或阅读者都能明确其含义及如何执行。")])]),t._v(" "),a("li",[a("p",[t._v("有限性\n对于任意一组合法输入值，在执行有限步骤之后一定能结束，即：算法中的每个步骤都能在有限时间内完成")])]),t._v(" "),a("li",[a("p",[t._v("可读性")]),t._v(" "),a("p",[t._v("算法应具备良好的可读性，这样的算法有利于算法的查错及对算法的理解，一般算法的逻辑必须清楚、结构简单，所有标识符必须具有实际含义，能见名知义。")])]),t._v(" "),a("li",[a("p",[t._v("健壮性")]),t._v(" "),a("p",[t._v("健壮性指当输入数据非法时，算法能作适当的处理并作出反应，而不应死机或输出异常结果")])])]),t._v(" "),a("h5",{attrs:{id:"算法描述方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法描述方法"}},[t._v("#")]),t._v(" 算法描述方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用自然语言描述算法\n用我们日常生活中的自然语言（可以是中文形式，也可以是英文形式）也可以描述算法")])]),t._v(" "),a("li",[a("p",[t._v("用流程图描述算法\n一个算法可以用流程图的方式来描述，输入输出、判断、处理分别用不同的框图表示，用箭头表示流程的流向。这是一种描述算法的较好方法，目前在一些高级语言程序设计中仍然采用。也有其他的图形辅助工具、")])]),t._v(" "),a("li",[a("p",[t._v("用其它方式描述算法")]),t._v(" "),a("p",[t._v("我们还可以用数学语言或约定的符号语言来描述算法")])]),t._v(" "),a("li",[a("p",[t._v("用程序设计语言描述算法")]),t._v(" "),a("p",[t._v("在本课中，我们将采用C++来描述算法,所有算法的描述都用C++中的函数模板或函数形式来描述")])])]),t._v(" "),a("h5",{attrs:{id:"算法和程序的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法和程序的关系"}},[t._v("#")]),t._v(" 算法和程序的关系")]),t._v(" "),a("ul",[a("li",[t._v("算法着重体现思路和方法，程序着重体现计算机的实现")]),t._v(" "),a("li",[t._v("程序不一定满足有穷性（死循环），另外，程序中的指令必须是机器可执行的，算法中的指令无此限制")]),t._v(" "),a("li",[t._v("一个算法若用计算机语言来书写，它就是一个程序")])]),t._v(" "),a("h5",{attrs:{id:"算法评价标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法评价标准"}},[t._v("#")]),t._v(" 算法评价标准")]),t._v(" "),a("ul",[a("li",[t._v("时间特性(时间复杂度T(n) )")]),t._v(" "),a("li",[t._v("空间特性(空间复杂度S(n) )")])]),t._v(" "),a("h4",{attrs:{id:"算法描述方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法描述方法-2"}},[t._v("#")]),t._v(" 算法描述方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用自然语言描述算法")]),t._v(" "),a("p",[t._v("用我们日常生活中的自然语言（可以是中文形式，也可以是英文形式）也可以描述算法")])]),t._v(" "),a("li",[a("p",[t._v("用流程图描述算法")]),t._v(" "),a("p",[t._v("一个算法可以用流程图的方式来描述，输入输出、判断、处理分别用不同的框图表示，用箭头表示流程的流向。这是一种描述算法的较好方法，目前在一些高级语言程序设计中仍然采用。也有其他的图形辅助工具")])]),t._v(" "),a("li",[a("p",[t._v("用其它方式描述算法")]),t._v(" "),a("p",[t._v("我们还可以用数学语言或约定的符号语言来描述算法")])]),t._v(" "),a("li",[a("p",[t._v("用程序设计语言描述算法")]),t._v(" "),a("p",[t._v("在本课中，我们将采用C++来描述算法,所有算法的描述都用C++中的函数模板或函数形式来描述")])])]),t._v(" "),a("p",[t._v("为表示各种状态信息，定义枚举类型StatusCode供使用，具体声明如下：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatusCode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    SUCCESS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FAIL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UNDER_FLOW"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \t\t\t\t\n    OVER_FLOW"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("RANGE_ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DUPLICATE_ERROR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    NOT_PRESENT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ENTRY_INSERTED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ENTRY_FOUND"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    VISITED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UNVISITED\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"算法和程序的关系-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法和程序的关系-2"}},[t._v("#")]),t._v(" "),a("strong",[t._v("算法和程序的关系")])]),t._v(" "),a("ul",[a("li",[t._v("算法着重体现思路和方法，程序着重体现计算机的实现")]),t._v(" "),a("li",[t._v("程序不一定满足有穷性（死循环），另外，程序中的指令必须是机器可执行的，算法中的指令无此限制")]),t._v(" "),a("li",[t._v("一个算法若用计算机语言来书写，它就是一个程序")])]),t._v(" "),a("h4",{attrs:{id:"算法评价标准-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法评价标准-2"}},[t._v("#")]),t._v(" 算法评价标准")]),t._v(" "),a("ul",[a("li",[t._v("时间特性(时间复杂度T(n) )")]),t._v(" "),a("li",[t._v("空间特性(空间复杂度S(n) )")])]),t._v(" "),a("h3",{attrs:{id:"时间复杂度比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度比较"}},[t._v("#")]),t._v(" 时间复杂度比较")]),t._v(" "),a("p",[t._v("O(1)<O(logn)<O(n)<O(nlogn)<O(n"),a("sup",[t._v("2")]),t._v(")<O(n"),a("sup",[t._v("3")]),t._v(")<O(2"),a("sup",[t._v("n")]),t._v(")<O(n!)<O(n"),a("sup",[t._v("n")]),t._v(")")]),t._v(" "),a("h2",{attrs:{id:"第二章-线性表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章-线性表"}},[t._v("#")]),t._v(" 第二章 线性表")]),t._v(" "),a("h3",{attrs:{id:"线性表的逻辑结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的逻辑结构"}},[t._v("#")]),t._v(" 线性表的逻辑结构")]),t._v(" "),a("h4",{attrs:{id:"线性表的定义和特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的定义和特点"}},[t._v("#")]),t._v(" 线性表的定义和特点")]),t._v(" "),a("h5",{attrs:{id:"线性表的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的定义"}},[t._v("#")]),t._v(" 线性表的定义")]),t._v(" "),a("p",[t._v("n(≥0)个数据元素的有限序列，记作：")]),t._v(" "),a("p",[t._v("​\t\t\t(a"),a("sub",[t._v("1")]),t._v(",a"),a("sub",[t._v("2")]),t._v(",...,a"),a("sub",[t._v("n")]),t._v(")")]),t._v(" "),a("p",[t._v("ai是线性表中的数据元素，n是线性表长度，期中a"),a("sub",[t._v("i")]),t._v("称为a"),a("sub",[t._v("i+1")]),t._v("的直接前驱，简称为前驱，a"),a("sub",[t._v("i+1")]),t._v("称为a"),a("sub",[t._v("i")]),t._v("的直接后继，简称为后继。")]),t._v(" "),a("h5",{attrs:{id:"线性表的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的特点"}},[t._v("#")]),t._v(" 线性表的特点")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("除第一个元素外，其他每一个元素有且仅有一个直接前驱")])]),t._v(" "),a("li",[a("p",[t._v("除最后一个元素外，其他每一个元素有且仅有一个直接后继")]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph LR\n1--\x3e2--\x3e3--\x3e4--\x3e5\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"线性表的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的基本操作"}},[t._v("#")]),t._v(" 线性表的基本操作")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("int Length() const\n初始条件：线性表已存在")]),t._v(" "),a("p",[t._v("操作结果：返回线性表的元素个数")])]),t._v(" "),a("li",[a("p",[t._v("bool Empty() const\n初始条件：线性表已存在")]),t._v(" "),a("p",[t._v("操作结果：如果线性表为空，则返回true，否则返回false")])]),t._v(" "),a("li",[a("p",[t._v("void Clear()")]),t._v(" "),a("p",[t._v("初始条件：线性表已存在。")]),t._v(" "),a("p",[t._v("操作结果：清空线性表。")])]),t._v(" "),a("li",[a("p",[t._v("void Traverse(void (*visit)(const ElemType &)) const")]),t._v(" "),a("p",[t._v("初始条件：线性表已存在")]),t._v(" "),a("p",[t._v("操作结果：依次对线性表的每个元素调用函数(*visit)。遍历")])]),t._v(" "),a("li",[a("p",[t._v("bool GetElem(int position,ElemType &e)const")]),t._v(" "),a("p",[t._v("初始条件：线性表已存在，1≤position≤Length() 。")]),t._v(" "),a("p",[t._v("操作结果：用e返回第posiiton个元素的值。")])]),t._v(" "),a("li",[a("p",[t._v("bool SetElem(int position,const ElemType &e)")]),t._v(" "),a("p",[t._v("初始条件：线性表已存在，1≤position≤Length()。")]),t._v(" "),a("p",[t._v("操作结果：将线性表的position个位置的元素赋值为e。")])]),t._v(" "),a("li",[a("p",[t._v("bool Delete(int position,ElemType &e)")]),t._v(" "),a("p",[t._v("初始条件：线性表已存在，1≤position≤Length()。")]),t._v(" "),a("p",[t._v("操作结果：删除线性表的第position个位置的元素，并用e返回其值，长度减1。")])]),t._v(" "),a("li",[a("p",[t._v("bool Insert(int position,const ElemType &e)")]),t._v(" "),a("p",[t._v("初始条件：线性表已存在，1≤position≤Length()+1。")]),t._v(" "),a("p",[t._v("操作结果：在线性表的第position个位置钱插入e，长度加1。")])])]),t._v(" "),a("h3",{attrs:{id:"线性表的顺序存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的顺序存储结构"}},[t._v("#")]),t._v(" 线性表的顺序存储结构")]),t._v(" "),a("h4",{attrs:{id:"顺序表的定义和特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序表的定义和特点"}},[t._v("#")]),t._v(" 顺序表的定义和特点")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("定义：将线性表中的元素相继存放在一个连续的存储空间中。")])]),t._v(" "),a("li",[a("p",[t._v("特点：可利用一维数组描述存储结构，采用线性表的顺序存储方式")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("线性表的顺序存储结构用一组地址连续的存储单元一次存储线性表的元素")])]),t._v(" "),a("li",[a("p",[t._v("线性表的顺序存储结构用元素在存储器中的“物理位置相邻”表示线性表中数据元素之间的逻辑关系，设LOC(ai)表示数据元素ai的存储位置，L为每个元素占用的存储单元个数，则有如下关系：")]),t._v(" "),a("center",[t._v("LOC(a"),a("sub",[t._v("i+1")]),t._v(")=LOC(a"),a("sub",[t._v("i")]),t._v(")+L")]),t._v(" "),a("center",[t._v("LOC(a"),a("sub",[t._v("i")]),t._v(")=LOC(a"),a("sub",[t._v("i")]),t._v(")+(i-1)*L")])],1),t._v(" "),a("li",[a("p",[t._v("线性表的顺序存储结构可直接随机存取任一个数据元素，所以线性表的顺序存储结构是一种随机存取的结构")])]),t._v(" "),a("li",[a("p",[t._v("在进行插入或删除操作时需移动大量的数据元素")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012135641786.png",alt:"image-20201012135641786"}})])])]),t._v(" "),a("h4",{attrs:{id:"顺序表的类模板的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序表的类模板的定义"}},[t._v("#")]),t._v(" 顺序表的类模板的定义")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顺序表类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqList")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顺序表实现的数据成员:")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素个数")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顺序表最大元素个数")]),t._v("\n\tElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素存储空间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Full")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断线性表是否已满")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化线性表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DEFAULT_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求线性表长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断线性表是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将线性表清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历线性表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求指定位置的元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置指定位置的元素值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("elemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n    SqList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("elemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("elemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"顺序表辅助函数模板的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序表辅助函数模板的实现"}},[t._v("#")]),t._v(" 顺序表辅助函数模板的实现")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Full")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：如线性表已满，则返回true，否则返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：初始化线性表为最大元素个数为size的空线性表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    maxSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大元素个数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放存储空间")]),t._v("\n    elems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" ElemType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配存储空间")]),t._v("\n    count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空线性表元素个数为0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"顺序表部分操作的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序表部分操作的实现"}},[t._v("#")]),t._v(" 顺序表部分操作的实现")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：构造一个最大元素个数为size的空顺序表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    elems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 未分配存储空间前,elems为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化线性表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nSqList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：销毁线性表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放存储空间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",[a("li",[a("p",[t._v("表项的插入")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012135721185.png",alt:"image-20201012135721185"}})]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：在线性表的第position个位置前插入元")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 素e, position的取值范围为")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1≤position≤Length()+1, 如线性表已满,则")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回false, 如position合法, 则返回true, 否")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 则返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ElemType tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线性表已满")]),t._v("\n   \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position范围错")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成功")]),t._v("\n        count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入后元素个数将自增1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入位置之后的元素右移")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将e赋值到position位置处")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入成功")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("表项的删除")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012135739865.png",alt:"image-20201012135739865"}})]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：删除线性表的第position个位置的元素,并前用e返回其值,position的的取值范围为1≤position≤Length(),position合法时函数返回true,否则返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ElemType tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position范围错")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position合法")]),t._v("\n   \t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用e返回被删除元素的值")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被删除元素之后的元素依次左移")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除后元素个数将自减1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"顺序表的应用-集合的-差-运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序表的应用-集合的-差-运算"}},[t._v("#")]),t._v(" 顺序表的应用：集合的“差” 运算")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件路径名:s2_1\\alg.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Difference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("la"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SqList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果: 用lc返回la和lb表示的集合的差集")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法: 在la中取出元素,在lb中进行查找,如果未在lb中出现了,将其插入到lc")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ElemType aElem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bElem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    lc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清空lc\t")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" aPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" aPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" la"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" aPos"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        la"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aElem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取出la的一个元素aElem")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" isExist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示aElem是否在lb中出现")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" bPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" bPos"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bElem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取出lb的一个元素bElem")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aElem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" bElem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                isExist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aElem同时在 la和lb中出现,置isExist为true")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 退出内层循环")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isExist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aElem在la中出现,而未在lb中未出现,将其插入到lc中")]),t._v("\n       \t\tlc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aElem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"线性表的链式存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性表的链式存储结构"}},[t._v("#")]),t._v(" 线性表的链式存储结构")]),t._v(" "),a("h4",{attrs:{id:"一、单链表-simple-linked-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、单链表-simple-linked-list"}},[t._v("#")]),t._v(" 一、单链表 (Simple Linked List)")]),t._v(" "),a("h5",{attrs:{id:"单链表的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表的概念"}},[t._v("#")]),t._v(" 单链表的概念")]),t._v(" "),a("p",[t._v("用一组地址任意的存储单元存放线性表中的数据元素。")]),t._v(" "),a("p",[t._v("以data(元素的值) + next(后继) = 结点(表示数据元素)")]),t._v(" "),a("p",[t._v("以“结点的序列”表示线性表称作单链表")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012135817049.png",alt:"image-20201012135817049"}})]),t._v(" "),a("p",[t._v("以线性表中第一个数据元素a"),a("sub",[t._v("1")]),t._v("的存储地址作为线性表的地址，称作线性表的头指针。")]),t._v(" "),a("p",[t._v("有时为了操作方便，在第一个结点之前 虚加一个“头结点”，这时指向头结点 的指针称为链表的头指针。，。")]),t._v(" "),a("h5",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("数据元素之间的逻辑关系由结点中的后继指针表示")]),t._v(" "),a("li",[t._v("每个数据元素的存储位置由其直接前驱的后继指针表示")]),t._v(" "),a("li",[t._v("线性表的链式存储结构是非随机存取的存储结构")]),t._v(" "),a("li",[t._v("线性表的链式存储结构中的尾结点的直接后继为空（即此结点的后继指针为空）")])]),t._v(" "),a("h5",{attrs:{id:"单链表的相关类模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表的相关类模板"}},[t._v("#")]),t._v(" 单链表的相关类模板")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结点类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据成员:")]),t._v("\n    ElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据域")]),t._v("\n    Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针域")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数模板:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数的构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("link "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 已知数据域和指针域建立结构")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简单线性链表类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleLinkList")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链表实现的数据成员:")]),t._v("\n\tNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头结点指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板:")]),t._v("\n\tNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElemPtr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回指向第position个结点的指针")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化线性表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleLinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleLinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求线性表长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断线性表是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将线性表清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历线性表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求指定位置的元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置指定位置的元素值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入元素")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleLinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SimpleLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n\tSimpleLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SimpleLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"单链表中的插入与删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表中的插入与删除"}},[t._v("#")]),t._v(" 单链表中的插入与删除")]),t._v(" "),a("h6",{attrs:{id:"插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[t._v("#")]),t._v(" 插入")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012135839282.png",alt:"image-20201012135839282"}})]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("newPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：在线性表的第position个位置前插入元素e,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position的取值范围为1≤position≤Length()+1,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position合法时返回true, 否则返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position范围错")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 位置不合法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position合法")]),t._v("\n        Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tmpPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElemPtr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取出指向第position-1个结点的指针")]),t._v("\n        Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("newPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        newPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成新结点")]),t._v("\n        tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将tmpPtr插入到链表中")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h6",{attrs:{id:"删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012135905609.png",alt:"image-20201012135905609"}})]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("nextPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nextPtr为tmpPtr的后继")]),t._v("\ntmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除结点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" nextPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放被删结点")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkList")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：删除线性表的第position个位置的元素, 并用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e返回其值, position的取值范围为")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1≤position≤Length(), position合法时返回true,否")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 则函数返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position范围错")]),t._v("\n   \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// position合法")]),t._v("\n        Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tmpPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElemPtr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取出指向第position-1个结点的指针")]),t._v("\n        Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("nextPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// nextPtr为tmpPtr的后继")]),t._v("\n        tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除结点")]),t._v("\n        e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用e返回被删结点元素值")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" nextPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放被删结点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"二、循环链表-circular-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、循环链表-circular-list"}},[t._v("#")]),t._v(" 二、循环链表 (Circular List)")]),t._v(" "),a("h5",{attrs:{id:"循环链表的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表的概念"}},[t._v("#")]),t._v(" 循环链表的概念")]),t._v(" "),a("ul",[a("li",[t._v("循环链表是单链表的变形。")]),t._v(" "),a("li",[t._v("循环链表最后一个结点的next指针不为 NULL， 而是指向了表的前端。")]),t._v(" "),a("li",[t._v("为简化操作，在循环链表中往往加入表头结点。")]),t._v(" "),a("li",[t._v("循环链表的特点是：只要知道表中某一结点的地址，就可搜寻到所有其他结点的地址。")])]),t._v(" "),a("h5",{attrs:{id:"循环链表示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表示例"}},[t._v("#")]),t._v(" 循环链表示例")]),t._v(" "),a("h5",{attrs:{id:"循环链表的相关类模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表的相关类模板"}},[t._v("#")]),t._v(" 循环链表的相关类模板")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简单循环链表类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleCircLinkList")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环链表实现的数据成员:")]),t._v("\n\tNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头结点指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板:")]),t._v("\n\tNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElemPtr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回指向第position个结点的指针")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化线性表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleCircLinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数的构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleCircLinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求线性表长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断线性表是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将线性表清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历线性表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求指定位置的元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置指定位置的元素值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleCircLinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SimpleCircLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n    SimpleCircLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("constSimpleCircLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"循环链表的应用-用循环链-表求解约瑟夫问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表的应用-用循环链-表求解约瑟夫问题"}},[t._v("#")]),t._v(" 循环链表的应用——用循环链 表求解约瑟夫问题")]),t._v(" "),a("div",{staticClass:"language-txt extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("约瑟夫问题的提法\nn 个人围成一个圆圈，首先第1个人从1开始一个人一个人顺时针报数, 报到第m个人，令其出列。然后再从下一个人开始，从1顺时针报数，报到第m个人，再令其出列，…，如此下去, 直到圆圈中只剩一个人为止。此人即为优胜者。\n例如 n = 8 m = 3\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件路径名:s2_5\\alg.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Josephus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果:n个人围成一个圆圈，首先第1个人从1开始一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 个人一个人顺时针报数,报到第m个人，令其出列。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后再从下一个人开始，从1顺时针报数报到第m")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 个人，再令其出列，…，如此下去, 直到圆圈中只")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩一个人为止。此人即为优胜者")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    SimpleCircLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" la"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义空循环链表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报数到的人在链表中序号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" winer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" la"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 建立数据域为1,2,..,n的循环链表")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"出列者:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环n-1次，让n-1个个出列")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从1报数到m")]),t._v("\n            position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" la"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            \tposition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \tla"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报数到m的人出列")]),t._v("\n   \t\tcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" out "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    la"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" winer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剩下的一个人为优胜者")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"优胜者:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" winer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"三、双向链表-doubly-linked-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、双向链表-doubly-linked-list"}},[t._v("#")]),t._v(" 三、双向链表 (Doubly Linked List)")]),t._v(" "),a("h5",{attrs:{id:"双向链表的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表的概念"}},[t._v("#")]),t._v(" 双向链表的概念")]),t._v(" "),a("ul",[a("li",[t._v("双向链表是指在前驱和后继方向都能游历 (遍历)的线性链表。")]),t._v(" "),a("li",[t._v("双向链表每个结点结构：")]),t._v(" "),a("li",[t._v("前驱方向 ➔后继方向")]),t._v(" "),a("li",[t._v("双向链表通常采用带表头结点的循环链表形式。")])]),t._v(" "),a("h5",{attrs:{id:"双向循环链表示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向循环链表示例"}},[t._v("#")]),t._v(" 双向循环链表示例")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012135942495.png",alt:"image-20201012135942495"}})]),t._v(" "),a("h4",{attrs:{id:"在链表结构中保存当前位置和元素个数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在链表结构中保存当前位置和元素个数"}},[t._v("#")]),t._v(" 在链表结构中保存当前位置和元素个数")]),t._v(" "),a("ul",[a("li",[t._v("前面讲解了线性表的链式存储结构的实现处理简单")]),t._v(" "),a("li",[t._v("但许多应用程序可能要几次引用同一个数据元素，对于这类应用程序，前面的链表实现效率低下")]),t._v(" "),a("li",[t._v("最好在链表结构中保存当前位置和元素个数。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线性链表类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkList")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链表实现的数据成员:")]),t._v("\n    Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头结点指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" curPosition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前位置的序号")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutable")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" curPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向当前位置的指针")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板:")]),t._v("\n\tNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElemPtr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回指向第position个结点的指针")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化线性表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数的构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求线性表长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断线性表是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将线性表清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历线性表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求指定位置的元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置指定位置的元素值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n    LinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"实例研究-一元多项式的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例研究-一元多项式的表示"}},[t._v("#")]),t._v(" 实例研究—— 一元多项式的表示")]),t._v(" "),a("p",[t._v("一元多项式")]),t._v(" "),a("p",[t._v("p"),a("sub",[t._v("n")]),t._v("(x) = p"),a("sub",[t._v("0")]),t._v(" + p"),a("sub",[t._v("1")]),t._v("x + p"),a("sub",[t._v("2")]),t._v("x"),a("sup",[t._v("2")]),t._v(" + ... + p"),a("sub",[t._v("n")]),t._v("x"),a("sup",[t._v("n")])]),t._v(" "),a("p",[t._v("在计算机中，可以用一个线性表来表示:")]),t._v(" "),a("p",[t._v("P = (p"),a("sub",[t._v("0")]),t._v(" , p"),a("sub",[t._v("1")]),t._v(" , …，p"),a("sub",[t._v("n")]),t._v(" )")]),t._v(" "),a("p",[t._v("但是对于形如 S(x) = 1 + 3x"),a("sup",[t._v("10000")]),t._v(" – 2x"),a("sup",[t._v("20000")]),t._v(" 的多项式，上述表示方法是否合适？")]),t._v(" "),a("p",[t._v("一般情况下的一元稀疏多项式可写成")]),t._v(" "),a("p",[t._v("P"),a("sub",[t._v("n")]),t._v(" (x) = p"),a("sub",[t._v("1")]),t._v("x"),a("sup",[t._v("e1")]),t._v(" + p"),a("sub",[t._v("2")]),t._v("x"),a("sup",[t._v("e2")]),t._v(" + ┄ + p"),a("sub",[t._v("m")]),t._v("x"),a("sup",[t._v("em")])]),t._v(" "),a("p",[t._v("其中：p"),a("sub",[t._v("i")]),t._v(" 是指数为e"),a("sub",[t._v("i")]),t._v(" 的项的非零系数， 0≤ e"),a("sub",[t._v("1")]),t._v(" < e"),a("sub",[t._v("2")]),t._v("< ┄ < e"),a("sub",[t._v("m")]),t._v(" = n")]),t._v(" "),a("p",[t._v("可以下列线性表表示：")]),t._v(" "),a("p",[t._v("（（p"),a("sub",[t._v("1")]),t._v(" , e"),a("sub",[t._v("1")]),t._v("）, (p"),a("sub",[t._v("2")]),t._v(" , e"),a("sub",[t._v("2")]),t._v(" ), ┄, (p"),a("sub",[t._v("m")]),t._v(",e"),a("sub",[t._v("m")]),t._v(") ）")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("p",[t._v("P"),a("sub",[t._v("999")]),t._v("(x) = 7x"),a("sup",[t._v("3")]),t._v(" - 2x"),a("sup",[t._v("12")]),t._v(" - 8x"),a("sup",[t._v("999")])]),t._v(" "),a("p",[t._v("可用线性表")]),t._v(" "),a("p",[t._v("( (7, 3), (-2, 12), (-8, 999) )")]),t._v(" "),a("p",[t._v("表示")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多项式项类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PolyItem")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据成员:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" coef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 系数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PolyItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无数据的构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PolyItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" cf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" en"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 已知系数域和指数域建立结构")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多项式类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Polynomial")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多项式实现的数据成员:")]),t._v("\n\tLinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PolyItem"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" polyList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多项式组成的线性表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Polynomial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Polynomial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求多项式的项数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsZero")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断多项式是否为0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetZero")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将多项式置为0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显示多项式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InsItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PolyItem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入一项")]),t._v("\n    Polynomial "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Polynomial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加法运算符重载")]),t._v("\n    Polynomial "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Polynomial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 减法运算符重载")]),t._v("\n    Polynomial "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Polynomial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 乘法运算符重载")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Polynomial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Polynomial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Polynomial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PolyItem"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copyLinkList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由多项式组成的线性表构造多项式")]),t._v("\n    Polynomial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Polynomial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n    Polynomial "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PolyItem"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copyLinkList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"链表套路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表套路"}},[t._v("#")]),t._v(" 链表套路")]),t._v(" "),a("h2",{attrs:{id:"常见题型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见题型"}},[t._v("#")]),t._v(" 常见题型")]),t._v(" "),a("h3",{attrs:{id:"题型一-反转链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题型一-反转链表"}},[t._v("#")]),t._v(" 题型一：反转链表")]),t._v(" "),a("ol",[a("li",[t._v("将某个链表进行反转")]),t._v(" "),a("li",[t._v("在 O(n) 时间, O(1) 空间复杂度下逆序读取链表的某个值")]),t._v(" "),a("li",[t._v("将某个链表按 K 个一组进行反转")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfih5wm9vzj31em080abx.jpg",alt:""}}),t._v("\n（图 1）")]),t._v(" "),a("h3",{attrs:{id:"题型二-合并链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题型二-合并链表"}},[t._v("#")]),t._v(" 题型二：合并链表")]),t._v(" "),a("ol",[a("li",[t._v("将两条有序或无序的链表合并成一条有序链表")]),t._v(" "),a("li",[t._v("将 k 条有序链表合并成一条有序链表")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfih6tlsicj310e0bwwh1.jpg",alt:""}}),t._v("\n（图 2）")]),t._v(" "),a("h3",{attrs:{id:"题型三-相交或环形链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题型三-相交或环形链表"}},[t._v("#")]),t._v(" 题型三：相交或环形链表")]),t._v(" "),a("ol",[a("li",[t._v("判断某条链表是否存在环")]),t._v(" "),a("li",[t._v("获取某条链表环的大小")]),t._v(" "),a("li",[t._v("获取某两条链表的相交节点")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfihaxlmqej317q0lg41w.jpg",alt:""}}),t._v("\n（图 3）")]),t._v(" "),a("h3",{attrs:{id:"题型四-设计题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题型四-设计题"}},[t._v("#")]),t._v(" 题型四：设计题")]),t._v(" "),a("p",[t._v("要求设计一种数据结构，可以在指定的时间或空间复杂度下完成 XX 操作，这种题目的套路就是"),a("strong",[t._v("牢记所有基本数据结构的基本操作以及其复杂度")]),t._v("。分析算法的瓶颈，并辅以恰当的数据结构进行优化。")]),t._v(" "),a("h2",{attrs:{id:"常见套路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见套路"}},[t._v("#")]),t._v(" 常见套路")]),t._v(" "),a("p",[t._v("针对上面的四种题型， 我们分别介绍如何用套路进行应对。")]),t._v(" "),a("h3",{attrs:{id:"套路一-反转链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#套路一-反转链表"}},[t._v("#")]),t._v(" 套路一：反转链表")]),t._v(" "),a("p",[t._v("伪代码:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("当前指针 =  头指针\n前一个节点 = null;\nwhile 当前指针不为空 {\n\t下一个节点 = 当前指针.next;\n    当前指针.next = 前一个节点\n    前一个节点 = 当前指针\n    当前指针 = 下一个节点\n}\nreturn 前一个节点;\n")])])]),a("p",[t._v("JS 代码参考:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  pre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("复杂度分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("code",[t._v("O(N)")])]),t._v(" "),a("li",[t._v("空间复杂度："),a("code",[t._v("O(1)")])])]),t._v(" "),a("h3",{attrs:{id:"套路二-合并链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#套路二-合并链表"}},[t._v("#")]),t._v(" 套路二：合并链表")]),t._v(" "),a("p",[t._v("伪代码:")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[t._v("ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ans 为需要返回的头节点")]),t._v("\ncur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ans\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// l1和l2分别为需要合并的两个链表的头节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l1 和 l2 都不为空\n    cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    更新较小的指针，往后移动一位\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n   cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n   cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next\n\n")])])]),a("p",[t._v("JS 代码参考:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" l2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    l2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("复杂度分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("code",[t._v("O(N)")])]),t._v(" "),a("li",[t._v("空间复杂度："),a("code",[t._v("O(1)")])])]),t._v(" "),a("h3",{attrs:{id:"套路三-相交或环形链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#套路三-相交或环形链表"}},[t._v("#")]),t._v(" 套路三：相交或环形链表")]),t._v(" "),a("h5",{attrs:{id:"链表相交求交点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表相交求交点"}},[t._v("#")]),t._v(" 链表相交求交点")]),t._v(" "),a("h6",{attrs:{id:"解法一-哈希法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法一-哈希法"}},[t._v("#")]),t._v(" 解法一：哈希法")]),t._v(" "),a("ul",[a("li",[t._v("有 A, B 这两条链表, 先遍历其中一个，比如 A 链表, 并将 A 中的所有节点存入哈希表。")]),t._v(" "),a("li",[t._v("遍历 B 链表,检查节点是否在哈希表中, 第一个存在的就是相交节点")])]),t._v(" "),a("p",[t._v("伪代码:")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存放A链表的所有节点的地址")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("不为空"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  哈希表中添加"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("链表当前节点\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("指针向后移动\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("不为空"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 如果哈希表中含有"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("链表当前节点\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("指针向后移动\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两条链表没有相交点")]),t._v("\n")])])]),a("p",[t._v("JS 代码参考:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("复杂度分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("code",[t._v("O(N)")])]),t._v(" "),a("li",[t._v("空间复杂度："),a("code",[t._v("O(N)")])])]),t._v(" "),a("h6",{attrs:{id:"解法二-双指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法二-双指针"}},[t._v("#")]),t._v(" 解法二：双指针")]),t._v(" "),a("ul",[a("li",[t._v("例如使用 a, b 两个指针分别指向 A, B 这两条链表, 两个指针相同的速度向后移动,")]),t._v(" "),a("li",[t._v("当 a 到达链表的尾部时,重定位到链表 B 的头结点")]),t._v(" "),a("li",[t._v("当 b 到达链表的尾部时,重定位到链表 A 的头结点。")]),t._v(" "),a("li",[t._v("a, b 指针相遇的点为相交的起始节点，否则没有相交点")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfig7vsvwhj30bs05z3yl.jpg",alt:""}}),t._v("\n（图 5）")]),t._v(" "),a("p",[t._v("为什么 a, b 指针相遇的点一定是相交的起始节点? 我们证明一下：")]),t._v(" "),a("ol",[a("li",[t._v("将两条链表按相交的起始节点继续截断，链表 1 为: A + C，链表 2 为: B + C")]),t._v(" "),a("li",[t._v("当 a 指针将链表 1 遍历完后,重定位到链表 B 的头结点,然后继续遍历直至相交点(a 指针遍历的距离为 A + C + B)")]),t._v(" "),a("li",[t._v("同理 b 指针遍历的距离为 B + C + A")])]),t._v(" "),a("p",[t._v("伪代码:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headB\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b指针不相等时 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" a指针为空时\n      a指针重定位到链表 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("的头结点\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      a指针向后移动一位\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" b指针为空时\n      b指针重定位到链表 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("的头结点\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      b指针向后移动一位\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a\n")])])]),a("p",[t._v("JS 代码参考:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getIntersectionNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("headA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" headB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" headB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" headA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Python 代码参考：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIntersectionNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" headA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" headB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" headB\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" headB\n            b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" headA\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a\n")])])]),a("p",[a("strong",[t._v("复杂度分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("code",[t._v("O(N)")])]),t._v(" "),a("li",[t._v("空间复杂度："),a("code",[t._v("O(1)")])])]),t._v(" "),a("h5",{attrs:{id:"环形链表求环的起点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环形链表求环的起点"}},[t._v("#")]),t._v(" 环形链表求环的起点")]),t._v(" "),a("h6",{attrs:{id:"解法一-哈希法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法一-哈希法-2"}},[t._v("#")]),t._v(" 解法一：哈希法")]),t._v(" "),a("ul",[a("li",[t._v("遍历整个链表,同时将每个节点都插入哈希表,")]),t._v(" "),a("li",[t._v("如果当前节点在哈希表中不存在,继续遍历,")]),t._v(" "),a("li",[t._v("如果存在,那么当前节点就是环的入口节点")])]),t._v(" "),a("p",[t._v("伪代码:")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明哈希表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" head不为空"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 当前节点在哈希表中存在"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前节点就是环的入口节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    将当前节点插入哈希表\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  head指针后移\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 环不存在")]),t._v("\n")])])]),a("p",[t._v("JS 代码参考:")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("复杂度分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("code",[t._v("O(N)")])]),t._v(" "),a("li",[t._v("空间复杂度："),a("code",[t._v("O(N)")])])]),t._v(" "),a("h6",{attrs:{id:"解法二-快慢指针法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解法二-快慢指针法"}},[t._v("#")]),t._v(" 解法二：快慢指针法")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("定义一个 fast 指针,每次"),a("strong",[t._v("前进两步")]),t._v(",一个 slow 指针,每次"),a("strong",[t._v("前进一步")])])]),t._v(" "),a("li",[a("p",[t._v("当两个指针相遇时")]),t._v(" "),a("ol",[a("li",[t._v("将 fast 指针指向链表头部,同时 fast 指针每次只"),a("strong",[t._v("前进一步")])]),t._v(" "),a("li",[t._v("slow 指针继续前进,每次"),a("strong",[t._v("前进一步")])])])]),t._v(" "),a("li",[a("p",[t._v("当两个指针再次相遇时,当前节点就是环的入口")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gfigbvzje1j30ky0bhq3x.jpg",alt:""}}),t._v("\n（图 6）")]),t._v(" "),a("p",[t._v("为什么第二次相遇的点为环的入口? 原因如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("第一次相遇时")])]),t._v(" "),a("li",[t._v("慢指针移动的距离为 s1 = A + B + n1 * L")]),t._v(" "),a("li",[t._v("快指针移动的距离为 s2 = A + B + n2 * L")]),t._v(" "),a("li",[t._v("快指针是慢指针速度的两倍,所以 s2 = 2* s1")]),t._v(" "),a("li",[t._v("A + B + n2 * L = 2A + 2B + n1 * L ===> A = -B + (n2 - n1) * L")]),t._v(" "),a("li",[t._v("因为圆的性质 (n2 - n1) * L ===> 绕圆 (n2 - n1) 圈 ===> 0")]),t._v(" "),a("li",[t._v("A = -B + (n2 - n1) * L ===> A = -B")]),t._v(" "),a("li",[t._v("即在第一次相遇点, 向前走 A 步 ===> 向后走 B 步")]),t._v(" "),a("li",[a("strong",[t._v("第一次相遇后")])]),t._v(" "),a("li",[t._v("快指针从头节点走 A 步会到达环的入口")]),t._v(" "),a("li",[t._v("慢指针从第一次相遇点走 A 步,相当于向后走 B 步,也会到达环的入口")])]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"https://github.com/azl397985856/leetcode/issues/274#issuecomment-573985706",target:"_blank",rel:"noopener noreferrer"}},[t._v("【每日一题】- 2020-01-14 - 142. 环形链表 II"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("伪代码：")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[t._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\nslow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//快慢指针都指向头部")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  快指针向后两步\n  慢指针向后一步\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 快慢指针不相等时\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 指针都为空时"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有环")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 快慢指针不相等时"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  快指针向后一步\n  慢指针向后一步\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fast\n")])])]),a("p",[t._v("JS 代码参考：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("复杂度分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度："),a("code",[t._v("O(N)")])]),t._v(" "),a("li",[t._v("空间复杂度："),a("code",[t._v("O(1)")])])]),t._v(" "),a("h2",{attrs:{id:"第3章-栈和队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第3章-栈和队列"}},[t._v("#")]),t._v(" 第3章 栈和队列")]),t._v(" "),a("ul",[a("li",[t._v("栈和队列是限定插入和删除只能在表的“端点”进行的线性表。")]),t._v(" "),a("li",[t._v("栈和队列是两种常用的线性表")])]),t._v(" "),a("h3",{attrs:{id:"栈-stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[t._v("#")]),t._v(" 栈(stack)")]),t._v(" "),a("h4",{attrs:{id:"栈的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的基本概念"}},[t._v("#")]),t._v(" 栈的基本概念")]),t._v(" "),a("h5",{attrs:{id:"栈的概念与特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的概念与特点"}},[t._v("#")]),t._v(" 栈的概念与特点")]),t._v(" "),a("ul",[a("li",[t._v("只允许在一端插入和删除的线性表")]),t._v(" "),a("li",[t._v("允许插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)")]),t._v(" "),a("li",[t._v("特点\n"),a("ul",[a("li",[t._v("后进先出(LIFO)")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012092406784.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"栈的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的基本操作"}},[t._v("#")]),t._v(" 栈的基本操作")]),t._v(" "),a("p",[t._v("（1）int Length() const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：栈已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：返回栈元素个数。")])])]),t._v(" "),a("p",[t._v("（2）bool Empty() const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：栈已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：如栈为空，则返回true，否则返回false")])])]),t._v(" "),a("p",[t._v("（3）void Clear()")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：栈已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：清空栈。")])])]),t._v(" "),a("p",[t._v("（4）void Traverse(void (visit)(const ElemType &)) const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：栈已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：从栈底到栈顶依次对栈的每个元素调用函数(*visit)")])])]),t._v(" "),a("p",[t._v("（5）bool Push(const ElemType &e)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：栈已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：插入元素e为新的栈顶元素。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012093039669.png",alt:"image-20201012093039669"}})]),t._v(" "),a("p",[t._v("（6）bool Top(ElemTyfe &e) const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：栈已存在且非空。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：用e返回栈顶元素。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012093133462.png",alt:"image-20201012093133462"}})]),t._v(" "),a("p",[t._v("（7）bool Pop(ElemType &e)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：栈已存在且非空。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：删除栈顶元素，并用e返回栈顶元素。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012093227716.png",alt:"image-20201012093227716"}})]),t._v(" "),a("h4",{attrs:{id:"栈的数组表示-顺序栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的数组表示-顺序栈"}},[t._v("#")]),t._v(" 栈的数组表示——顺序栈")]),t._v(" "),a("ul",[a("li",[t._v("在顺序实现中，利用数组依次存放从栈底到栈顶的数据元素")]),t._v(" "),a("li",[t._v("用count存储数组中存储的栈的实际元素个数\n"),a("ul",[a("li",[t._v("当count = 0时表示栈为空")]),t._v(" "),a("li",[t._v("入栈操作时，如栈未满，操作成功，count的值将加1")]),t._v(" "),a("li",[t._v("出栈时，如栈不空，操作成功，并且count的值将减1")])])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顺序栈类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqStack")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顺序栈的数据成员:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素个数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈最大元素个数")]),t._v("\n    ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素存储空间")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Full")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断栈是否已满")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化栈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DEFAULT_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求栈长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断栈是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将栈清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回栈顶")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n    SqStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("constSqStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("复制构造函数模板")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqStack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：由栈copy构造新栈——复制构造函数模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    elems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 未分配存储空间前,elems为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化新栈")]),t._v("\n    count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈元素个数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("curPosition"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从栈底到栈顶对栈copy的每个元素进行复制")]),t._v("\n        elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nSqStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("SqStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：将栈copy赋值给当前栈——重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化当前栈")]),t._v("\n        count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制栈元素个数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" curPosition"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从栈底到栈顶对栈复制copy的元素")]),t._v("\n            elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012112950509.png",alt:"image-20201012112950509"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012112959497.png",alt:"image-20201012112959497"}})]),t._v(" "),a("p",[t._v("双栈共享一个栈空间")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012113313024.png",alt:"image-20201012113313024"}})]),t._v(" "),a("h4",{attrs:{id:"三、链式栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、链式栈"}},[t._v("#")]),t._v(" 三、链式栈")]),t._v(" "),a("h5",{attrs:{id:"链式栈的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式栈的基本概念"}},[t._v("#")]),t._v(" 链式栈的基本概念")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012113516074.png",alt:"image-20201012113516074"}})]),t._v(" "),a("ul",[a("li",[t._v("链式栈无栈满问题，空间可扩充")]),t._v(" "),a("li",[t._v("插入与删除仅在栈顶处执行")]),t._v(" "),a("li",[t._v("链式栈的栈顶在链头")]),t._v(" "),a("li",[t._v("链式栈入栈和出栈操作都非常简单，一般都不使用头结点直接实现")])]),t._v(" "),a("h5",{attrs:{id:"链式栈的类模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式栈的类模板"}},[t._v("#")]),t._v(" 链式栈的类模板")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链栈类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkStack")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链栈实现的数据成员:")]),t._v("\n\tNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈顶指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板:")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化栈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数的构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求栈长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断栈是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将栈清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回栈顶元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LinkStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n    LinkStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LinkStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"部分成员函数模板的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部分成员函数模板的实现"}},[t._v("#")]),t._v(" 部分成员函数模板的实现")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：构造一个空栈表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LinkStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：销毁栈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：将元素e追加到栈顶,如成功则返加true,否则,如动态内存已耗尽将返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("newTop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newTop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态内存耗尽")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作成功")]),t._v("\n        top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newTop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素个数自加1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：如栈非空,删除栈顶元素,并用e返回栈顶元素,返回true,否则返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈空")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作成功")]),t._v("\n        Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("old_top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧栈顶")]),t._v("\n        e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" old_top"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用e返回栈顶元素")]),t._v("\n        top "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" old_top"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// top指向新栈顶")]),t._v("\n        count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素个数自减1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" old_top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除旧栈顶")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：如栈非空,用e返回栈顶元素,返回true,否则返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈空")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈非空,操作成功")]),t._v("\n        e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用e返回栈顶元素")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkStack")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：从栈底到栈顶依次对栈的每个元素调用函数(*visit)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tmpPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LinkStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" tmpS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 临时栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用tmpPtr依次指向当前栈的每个元素")]),t._v("\n    \ttmpS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个元素入栈")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmpS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从栈顶到栈底依次指向栈tmpS的每个元素")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),a("h4",{attrs:{id:"队列-queue-的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue-的基本概念"}},[t._v("#")]),t._v(" 队列(Queue)的基本概念")]),t._v(" "),a("h5",{attrs:{id:"队列的初步认识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列的初步认识"}},[t._v("#")]),t._v(" 队列的初步认识")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012114854942.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("定义\n"),a("ul",[a("li",[t._v("队列是只允许在一端删除，在另一端插入的线性表")]),t._v(" "),a("li",[t._v("允许删除的一端叫做队头(front)，允许插入的一端叫做队尾(rear)。")])])]),t._v(" "),a("li",[t._v("特性\n"),a("ul",[a("li",[t._v("先进先出(FIFO, First In First Out)")])])])]),t._v(" "),a("h5",{attrs:{id:"队列的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列的基本操作"}},[t._v("#")]),t._v(" 队列的基本操作")]),t._v(" "),a("p",[t._v("（1）int Length() const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：队列已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：返回队列长度")])])]),t._v(" "),a("p",[t._v("（2）bool Empty() const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：队列已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：如队列为空，则返回true，否则返回false")])])]),t._v(" "),a("p",[t._v("（3）void Clear()")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：队列已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：清空队列")])])]),t._v(" "),a("p",[t._v("（4）void Traverse(void (*visit)(const ElemType &)) const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：队列已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：依次对队列的每个元素调用函数(*visit)")])])]),t._v(" "),a("p",[t._v("（5）bool OutQueue(ElemType &e)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：队列非空。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：删除队头元素，并用e返回其值。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012115254050.png",alt:"image-20201012115254050"}})]),t._v(" "),a("p",[t._v("（6）bool GetHead(ElemType &e) const")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：队列非空。")]),t._v(" "),a("li",[t._v("操作结果：用e返回队头元素。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012115332350.png",alt:"image-20201012115332350"}})]),t._v(" "),a("p",[t._v("（7）bool InQueue(const ElemType &e)")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：队列已存在。")]),t._v(" "),a("li",[t._v("操作结果：插入元素e为新的队尾。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012115404331.png",alt:"image-20201012115404331"}})]),t._v(" "),a("h4",{attrs:{id:"链队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链队列"}},[t._v("#")]),t._v(" 链队列")]),t._v(" "),a("h5",{attrs:{id:"链队列的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链队列的基本概念"}},[t._v("#")]),t._v(" 链队列的基本概念")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012115508391.png",alt:"image-20201012115508391"}})]),t._v(" "),a("ul",[a("li",[t._v("链式队列在入队时无队满问题，但有队空问题。")]),t._v(" "),a("li",[t._v("队空条件为front ==rear")])]),t._v(" "),a("h5",{attrs:{id:"链队列的类模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链队列的类模板"}},[t._v("#")]),t._v(" 链队列的类模板")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkQueue")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链队列实现的数据成员:")]),t._v("\n    Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("front"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队头队尾指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化队列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数的构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求队列长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断队列是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将队列清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历队列bool ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("OutQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出队操作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取队头操作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入队")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LinkQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n    LinkQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("constLinkQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"循环队列-队列的顺序存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环队列-队列的顺序存储结构"}},[t._v("#")]),t._v(" 循环队列——队列的顺序存储结构")]),t._v(" "),a("h5",{attrs:{id:"顺序队列的入队和出队"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序队列的入队和出队"}},[t._v("#")]),t._v(" 顺序队列的入队和出队")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012115925941.png",alt:"image-20201012115925941"}})]),t._v(" "),a("h5",{attrs:{id:"顺序队列的入队和出队原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序队列的入队和出队原则"}},[t._v("#")]),t._v(" 顺序队列的入队和出队原则")]),t._v(" "),a("ul",[a("li",[t._v("入队时将新元素按rear指示位置加入再将队尾rear自加1: rear=rear+1。")]),t._v(" "),a("li",[t._v("出队时将下标为front 的元素取出, 再将队头front自加1: front=front+1。")]),t._v(" "),a("li",[t._v("队满时再入队将溢出出错；")]),t._v(" "),a("li",[t._v("队空时再出队将队空处理。")]),t._v(" "),a("li",[t._v("解决假溢出方法：将队列元素存放数组首尾相接，形成循环(环形)队列。")])]),t._v(" "),a("h5",{attrs:{id:"循环队列-circular-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环队列-circular-queue"}},[t._v("#")]),t._v(" 循环队列(Circular Queue)")]),t._v(" "),a("ul",[a("li",[t._v("队列存放数组被当作首尾相接的表处理。")]),t._v(" "),a("li",[t._v("队头front、队尾rear自加1时从maxSize -1直接进到0，可用语言的取模(余数)运算实现。")]),t._v(" "),a("li",[t._v("队头front自加1:front = (front+1) % maxSize;")]),t._v(" "),a("li",[t._v("队尾rear自加1: rear = (rear+1) % maxSize;")]),t._v(" "),a("li",[t._v("队列初始化：front= rear= 0;")]),t._v(" "),a("li",[t._v("队空条件：front==rear 或Length() == 0;")]),t._v(" "),a("li",[t._v("队满条件：(rear+1) % maxSize ==front或Length() == maxSize –1。")])]),t._v(" "),a("h5",{attrs:{id:"循环队列入队和出队示意图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环队列入队和出队示意图"}},[t._v("#")]),t._v(" 循环队列入队和出队示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012120212793.png",alt:"image-20201012120212793"}})]),t._v(" "),a("h5",{attrs:{id:"循环队列的类模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环队列的类模板"}},[t._v("#")]),t._v(" 循环队列的类模板")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqQueue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" front"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队头队尾")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列最大元素个数")]),t._v("\n    ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素存储空间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Full")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断栈是否已满")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化队列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DEFAULT_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求队列长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断队列是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将队列清空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历队列")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("OutQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出队操作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取队头操作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入队")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SqQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" SqQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n    SqQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" qQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重载赋值运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"部分成员函数模板的实现-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部分成员函数模板的实现-2"}},[t._v("#")]),t._v(" 部分成员函数模板的实现")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Full")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：如队列已满，则返回true，否则返回false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" maxSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：初始化队列")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\trear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" front "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：返回队列长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("front "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：依次对队列的每个元素调用函数(*visit)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" front"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" rear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curPosition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" maxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对队列每个元素调用函数(*visit)")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("curPosition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkQueue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("OutQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：如果队列非空，那么删除队头元素，并用e返回其值，返回true, 否则返回false，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列非空")]),t._v("\n        Node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tmpPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" front"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向队列头素")]),t._v("\n        e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用e返回队头元素")]),t._v("\n        front"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// front指向下一元素")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示出队前队列中只有一个元素，出队后为空队列")]),t._v("\n            rear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" front"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" tmpPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放出队的结点")]),t._v("\n        count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素个数自减1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列为空")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"实例研究-表达式求值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例研究-表达式求值"}},[t._v("#")]),t._v(" 实例研究——表达式求值")]),t._v(" "),a("h4",{attrs:{id:"一、表达式基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、表达式基础"}},[t._v("#")]),t._v(" 一、表达式基础")]),t._v(" "),a("ul",[a("li",[t._v("表达式由操作数(亦称运算对象)、操作符(亦称运算符)和分界符组成。")]),t._v(" "),a("li",[t._v("算术表达式有三种表示：\n"),a("ul",[a("li",[t._v("中缀(infix)表示\n<操作数><操作符><操作数>，如A+B；")]),t._v(" "),a("li",[t._v("前缀(prefix)表示\n<操作符><操作数><操作数>，如+AB；")]),t._v(" "),a("li",[t._v("后缀(postfix)表示\n<操作数> <操作数> <操作符>，如AB+；")])])])]),t._v(" "),a("h4",{attrs:{id:"二、表达式的中缀表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、表达式的中缀表示"}},[t._v("#")]),t._v(" 二、表达式的中缀表示")]),t._v(" "),a("p",[t._v("表达式中相邻两个操作符的计算次序为：")]),t._v(" "),a("ul",[a("li",[t._v("优先级高的先计算；")]),t._v(" "),a("li",[t._v("优先级相同的自左向右计算；")]),t._v(" "),a("li",[t._v("当使用括号时从最内层括号开始计算。")])]),t._v(" "),a("h4",{attrs:{id:"三、算符优先法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、算符优先法"}},[t._v("#")]),t._v(" 三、算符优先法")]),t._v(" "),a("ul",[a("li",[t._v("算符优先法就是根据上面的运算符优先关系来实现对表达式进行编译执行")]),t._v(" "),a("li",[t._v("任何表达式都可看成由操作数（operand）、操作符（operator）和界限符（delimiter）组成")]),t._v(" "),a("li",[t._v("为简单起见，只讨论算要四则运算符（“==+==”、“==-==”、“==*==”、“==/==”），操作数为常数，界限符为左右圆括和等号==（==“==（==”，“==）==”，“=====”）；")])]),t._v(" "),a("h4",{attrs:{id:"四、操作符的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、操作符的优先级"}},[t._v("#")]),t._v(" 四、操作符的优先级")]),t._v(" "),a("p",[t._v("对于任意两个操作符theta1和theta2的优先关系如下：")]),t._v(" "),a("ol",[a("li",[t._v("theta1< theta2：theta1优先级低于theta2。")]),t._v(" "),a("li",[t._v("theta1= theta2：theta1优先级等于theta2。")]),t._v(" "),a("li",[t._v("theta1> theta2：theta1优先级高于theta2。")]),t._v(" "),a("li",[t._v("theta1e theta2：theta1与theta2不允许相继出现")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201012121949166.png",alt:"image-20201012121949166"}})]),t._v(" "),a("p",[t._v("操作符优先级相等的情况只出现在括号配对或左右操作符都是'='的情形。")]),t._v(" "),a("h4",{attrs:{id:"五、中缀算术表达式求值算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、中缀算术表达式求值算法"}},[t._v("#")]),t._v(" 五、中缀算术表达式求值算法")]),t._v(" "),a("ul",[a("li",[t._v("使用两个栈，操作符栈optr(operator)，操作数栈opnd(operand)，")]),t._v(" "),a("li",[t._v("对中缀表达式求值的一般规则：\n"),a("ol",[a("li",[t._v("在optr栈中压入一个'='。")]),t._v(" "),a("li",[t._v("从输入流获取一字符ch。")]),t._v(" "),a("li",[t._v("取出optr的栈顶optrTop。")]),t._v(" "),a("li",[t._v("当optrTop!='='或ch!='='时,循环执行以下工作,否则结束算法。此时在opnd栈的栈顶得到运算结果。")])])])]),t._v(" "),a("p",[t._v("while(optrTop!='='||ch!='=')\n{\n1. 若ch不是操作符，则将字符放回输入流(cin.putback)，读操作数operand并进opnd栈，并读入下一字符送入ch；\n2. 若ch是操作符，将比较ch的优先级和optrTop的优先级：\n* 若optrTop<ch，则ch进optr栈，从中缀表达式取下一字符送入ch；\n* 若optrTop>ch，则从opnd栈退出a2和a1，从optr栈退出θ,形成运算指令(a1)θ(a2)，结果进opnd栈；\n* 若optrTop=ch(此处特指optrTop与ch的优先级相等)且ch==')'，此时optrTop为'('，则从optr栈退出栈顶的‘(’，对消括号，然后从中缀表达式取下一字符送入ch；\n* 若optrTopech，则出现表达式错误，终止执行。\n3. 取出optr的栈顶optrTop。")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("h4",{attrs:{id:"六、中缀表达式中操作符的优先级的另一个表示方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、中缀表达式中操作符的优先级的另一个表示方法"}},[t._v("#")]),t._v(" 六、中缀表达式中操作符的优先级的另一个表示方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作符ch")]),t._v(" "),a("th",[t._v("‘='")]),t._v(" "),a("th",[t._v("‘('")]),t._v(" "),a("th",[t._v("'*', '/', '%'")]),t._v(" "),a("th",[t._v("'+', '-'")]),t._v(" "),a("th",[t._v("')'")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Isp (栈内)")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("5")]),t._v(" "),a("td",[t._v("3")]),t._v(" "),a("td",[t._v("6")])]),t._v(" "),a("tr",[a("td",[t._v("Icp (栈外)")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("6")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("1")])])])]),t._v(" "),a("ul",[a("li",[t._v("Isp叫做栈内(instackpriority)优先数，实际为表达式中左操作符的优先数。")]),t._v(" "),a("li",[t._v("Icp叫做栈外(incomingpriority)优先数，实际为表达式中右操作符的优先数。")]),t._v(" "),a("li",[t._v("操作符优先数相等的情况只出现在括号配对或栈底的'='号与输入流最后的'='号配对时。")])]),t._v(" "),a("h4",{attrs:{id:"七、中缀算术表达式求值的另一种算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、中缀算术表达式求值的另一种算法"}},[t._v("#")]),t._v(" 七、中缀算术表达式求值的另一种算法")]),t._v(" "),a("ul",[a("li",[t._v("用两个栈，操作符栈optr(operator)，操作数栈opnd(operand)，")]),t._v(" "),a("li",[t._v("对中缀表达式求值的一般规则：\n"),a("ol",[a("li",[t._v("在optr栈中压入一个'='。")]),t._v(" "),a("li",[t._v("从输入流获取一字符ch。")]),t._v(" "),a("li",[t._v("取出optr的栈顶optrTop。")]),t._v(" "),a("li",[t._v("当"),a("code",[t._v("optrTop!='='")]),t._v("或"),a("code",[t._v("ch!='='")]),t._v("时,循环执行以下工作,否则结束算法。此时在opnd栈的栈顶得到运算结果。")])])])]),t._v(" "),a("p",[t._v("while(optrTop!='='||ch!='='){")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("若ch不是操作符，则将字符放回输入流(cin.putback)，读操作数operand并进opnd栈，并读入下一字符送入ch；")])]),t._v(" "),a("li",[a("p",[t._v("若ch是操作符，比较Icp(ch)的优先级和Isp(optrTop)的优先级：")]),t._v(" "),a("ul",[a("li",[t._v("若Isp(optrTop)<Icp(ch)，则ch进optr栈，从中缀表达式取下一字符送入ch；")]),t._v(" "),a("li",[t._v("若Isp(optrTop)>Icp(ch)，则从opnd栈退出a2和a1，从optr栈退出θ,形成运算指令(a1)θ(a2)，结果进opnd栈；")]),t._v(" "),a("li",[t._v("若Isp(optrTop)==Icp(ch)且ch==')'，则从optr栈退出栈顶的'('，对消括号，然后从中缀表达式取下一字符送入ch。")]),t._v(" "),a("li",[t._v("取出optr的栈顶optrTop。")])]),t._v(" "),a("p",[t._v("}")])])]),t._v(" "),a("h2",{attrs:{id:"第-4-章-串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-4-章-串"}},[t._v("#")]),t._v(" 第 4 章 串")]),t._v(" "),a("h3",{attrs:{id:"串类型的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串类型的定义"}},[t._v("#")]),t._v(" 串类型的定义")]),t._v(" "),a("h4",{attrs:{id:"一、串的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、串的定义"}},[t._v("#")]),t._v(" 一、串的定义")]),t._v(" "),a("p",[t._v("n(n>=0)个字符的有限序列")]),t._v(" "),a("ul",[a("li",[t._v('s="a1 ,a2 ,…,an "')]),t._v(" "),a("li",[t._v("串名: s")]),t._v(" "),a("li",[t._v("串值: a"),a("sub",[t._v("i")]),t._v(" (1≤i ≤ n)")]),t._v(" "),a("li",[t._v("串长: n")])]),t._v(" "),a("h4",{attrs:{id:"二、串的基本术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、串的基本术语"}},[t._v("#")]),t._v(" 二、串的基本术语")]),t._v(" "),a("ul",[a("li",[t._v("空串\n"),a("ul",[a("li",[t._v("n=0的串")])])]),t._v(" "),a("li",[t._v("子串\n"),a("ul",[a("li",[t._v("串中若干相邻字符组成的子序列")])])]),t._v(" "),a("li",[t._v("主串\n"),a("ul",[a("li",[t._v("包含子串的串")])])]),t._v(" "),a("li",[t._v("空格串\n"),a("ul",[a("li",[t._v("仅含有空格字符的串(n不为0)")])])]),t._v(" "),a("li",[t._v("串相等\n"),a("ul",[a("li",[t._v('设 s1="a11,…,an1 " s2="a12,…,an2 " 若 n1=n2且ai1=ai2（1≤i≤n1) 则 s1=s2')])])])]),t._v(" "),a("h4",{attrs:{id:"三、串的基本术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、串的基本术语"}},[t._v("#")]),t._v(" 三、串的基本术语")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("void Copy(String &copy, const String &original)")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：串 original 已存在。")]),t._v(" "),a("li",[t._v("操作结果：将串 original 复制得到一个串 copy 。")])])]),t._v(" "),a("li",[a("p",[t._v("bool Empty() const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：串已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：如串为空，则返回 true ，否则返回 false 。")])])])]),t._v(" "),a("li",[a("p",[t._v("int Length() const")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("初始条件：串已存在。")])]),t._v(" "),a("li",[a("p",[t._v("操作结果：返回串的长度，即串中的字符个数。")])])])]),t._v(" "),a("li",[a("p",[t._v("void Concat (String &addTo , const String &addOn)")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：串 addTo 和 addOn 已存在。")]),t._v(" "),a("li",[t._v("操作结果：将串 addOn 联接到串 addTo 的后面。")])])]),t._v(" "),a("li",[a("p",[t._v("String SubString (const String &s, int pos,int len)")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：串存在，且 0≤pos s.Length,0≤ len ≤ s.Length () pos 。")]),t._v(" "),a("li",[t._v("操作结果：返回从第 pos 个字符开始长度为len 的子串。")])])]),t._v(" "),a("li",[a("p",[t._v("int Index(const String &target, const String &pattern, int pos = 0)")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：目标串 target 和串 pattern 都存在，模式串 pattern 非空，且 0 ≤ pos < target.Length() 。")]),t._v(" "),a("li",[t._v("操作结果：返回目标串 target 中第 pos 个字符后第一次出现的模式串 pattern 的位置。")])])])]),t._v(" "),a("h3",{attrs:{id:"字符串的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的实现"}},[t._v("#")]),t._v(" 字符串的实现")]),t._v(" "),a("ul",[a("li",[t._v("在 C++ 在头文件 string 中已含了一种安全的字符串实现")]),t._v(" "),a("li",[t._v("由于这个库没有包含在一些较老的C++ 编译器中，因此本节将设计自已的安全的 String 类，使用面向对象技术来克服 C 风格的串中存在的问题。")])]),t._v(" "),a("h4",{attrs:{id:"串类及串相关操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串类及串相关操作"}},[t._v("#")]),t._v(" 串类及串相关操作")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串实现的数据成员")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("strVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串长")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抽象数据类型方法声明及重载编译系统默认方法声明")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 C 风格串转换的构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从线性表转换的构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求串长度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断串是否为空")]),t._v("\n    String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将串转换成 C 风格串")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载下标运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//串相关操作")]),t._v("\nString "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" istream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从输入流读入串")]),t._v("\nString "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" istream input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" terminalChar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从输入流读入串 用 terminalChar 返回串结束字符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Concat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addTo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addOn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将串 addOn 连接到 addTo 串的后面")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将串 original 复制到串 copy")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将串 original 复制 n 个字符到串 copy")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找模式串 pattern 第一次在目标串 target 中从第pos 个字符开始出现的位置")]),t._v("\nString "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SubString")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求串 s 的第 pos 个字符开始的长度为 len 的子串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载关系运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载关系运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载关系运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载关系运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载关系运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载关系运算符")]),t._v("\n")])])]),a("h4",{attrs:{id:"串类部分成员函数的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串类部分成员函数的实现"}},[t._v("#")]),t._v(" 串类部分成员函数的实现")]),t._v(" "),a("h5",{attrs:{id:"串构造函数-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串构造函数-1"}},[t._v("#")]),t._v(" 串构造函数(1)")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("inString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：从 C 风格串转换构造新串——转换构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlength "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串长")]),t._v("\n\tstrVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配存储空间")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制串值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"串构造函数-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串构造函数-2"}},[t._v("#")]),t._v(" 串构造函数(2)")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//操作结果：从线性表转换构造新串——转换构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串长")]),t._v("\n    strVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配存储空间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制串值")]),t._v("\n    \tcopy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    strVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串值以 0' 结束")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"将-c-串转换为-c-语言串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将-c-串转换为-c-语言串"}},[t._v("#")]),t._v(" 将 C++ 串转换为 C 语言串")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：将串转换成 C 风格串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("strVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串值类型转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"串比较实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#串比较实现"}},[t._v("#")]),t._v(" 串比较实现")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：重载关系运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：重载关系运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"进一步串操作示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进一步串操作示例"}},[t._v("#")]),t._v(" 进一步串操作示例")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addTo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("addOn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：将串 addOn 连接到 addTo 串的后面")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cFirst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" addTo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向第一个串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cSecond "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" addOn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向第二个串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("copy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cFirst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cSecond"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配存储空间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cFirst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制第一个串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cSecond"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接第二个串")]),t._v("\naddTo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 串赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放 copy")]),t._v("\n")])])]),a("h3",{attrs:{id:"字符串模式匹配算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串模式匹配算法"}},[t._v("#")]),t._v(" 字符串模式匹配算法")]),t._v(" "),a("h5",{attrs:{id:"简单字符串模式匹配算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单字符串模式匹配算法"}},[t._v("#")]),t._v(" 简单字符串模式匹配算法")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109102309497.png",alt:"image-20201109102309497"}})]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SimpleIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果 : 查找模式串 P 第一次在目标串 T 中从第 pos 个字符开始出现的位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" startPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继续比较后续字符")]),t._v("\n        \ti "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针回退 重新开始新的匹配")]),t._v("\n        \ti "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("startPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" startPos "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配成功")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配失败")]),t._v("\n")])])]),a("h5",{attrs:{id:"首尾字符串模式匹配算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首尾字符串模式匹配算法"}},[t._v("#")]),t._v(" 首尾字符串模式匹配算法")]),t._v(" "),a("ul",[a("li",[t._v("在简单字符串模式匹配算法中，分析匹配执行时间的最坏情况是每趟匹配过程都是在比较到模式串的最后一个字符时才发现不能匹配。")]),t._v(" "),a("li",[t._v("为避免在每趟匹配的最后一个字符时才发现不能匹配，可采用从模式串的两头分别进行比较的方法。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FrontRearIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" String "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果 : 查找模式串 P 第一次在目标串 T 中从第 pos 个字符开始出现的位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" startPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" startPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" front "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Length")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模式串的首尾部字符位置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("front "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" rear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("startPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" front"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("front"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("startPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" rear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模式串的首部或尾部字符不匹配,退出内循环")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                front"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                rear "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首尾部字符匹配 , 重新定位新的首尾部字符")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("front "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" rear"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" startPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配成功")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("startPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首部或尾部部字符不匹配重新查找匹配起始点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配失败")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"第-5-章-数组和广义表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-数组和广义表"}},[t._v("#")]),t._v(" 第 5 章 数组和广义表")]),t._v(" "),a("h3",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("h4",{attrs:{id:"数组元素的存储顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组元素的存储顺序"}},[t._v("#")]),t._v(" 数组元素的存储顺序")]),t._v(" "),a("ol",[a("li",[t._v("以行序为主序（按行排列）:\n先排最右的下标依次向左，最后排最左的下标")]),t._v(" "),a("li",[t._v("以列序为主序（按列排列）：\n先排最左的下标，依次向右，最后排最右的下标")])]),t._v(" "),a("h4",{attrs:{id:"二维数组元素的存储位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二维数组元素的存储位置"}},[t._v("#")]),t._v(" 二维数组元素的存储位置")]),t._v(" "),a("h5",{attrs:{id:"c-中二维数组的元素的存储位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中二维数组的元素的存储位置"}},[t._v("#")]),t._v(" C 中二维数组的元素的存储位置")]),t._v(" "),a("p",[t._v("例如:")]),t._v(" "),a("table",[a("tr",[a("td",[t._v("a"),a("sub",[t._v("0,0")])]),t._v(" "),a("td",[t._v("a"),a("sub",[t._v("0,1")])]),t._v(" "),a("td",[t._v("a "),a("sub",[t._v("0,2")])])]),t._v(" "),a("tr",[a("td",[t._v("a"),a("sub",[t._v("1,0")])]),t._v(" "),a("td",[t._v("a"),a("sub",[t._v("1,1")])]),t._v(" "),a("td",[t._v("a"),a("sub",[t._v("1,2")])])])]),t._v(" "),a("table",[a("tr",[a("td",[t._v("a"),a("sub",[t._v("0,0")])]),t._v(" "),a("td",[t._v("a"),a("sub",[t._v("0,1")])]),t._v(" "),a("td",[t._v("a "),a("sub",[t._v("0,2")])]),t._v(" "),a("td",[t._v("a"),a("sub",[t._v("1,0")])]),t._v(" "),a("td",[t._v("a"),a("sub",[t._v("1,1")])]),t._v(" "),a("td",[t._v("a"),a("sub",[t._v("1,2")])])])]),t._v(" "),a("p",[t._v("二维数组"),a("code",[t._v("a[b1][b2]")]),t._v("中任一元素 a"),a("sub",[t._v("i,j")]),t._v("的存储位置")]),t._v(" "),a("center",[t._v("Loc(i,j) = Loc(0,0) + (b"),a("sub",[t._v("2")]),t._v(" × i + j) × L")]),t._v(" "),a("p",[t._v("其中Loc(0,0)称为基地址或基址。")]),t._v(" "),a("h4",{attrs:{id:"n-维数组元素的存储位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#n-维数组元素的存储位置"}},[t._v("#")]),t._v(" n 维数组元素的存储位置")]),t._v(" "),a("p",[t._v("推广到一般情况，可得到n 维数组数据元素按行序的存储位置有如下的关系")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109105544562.png",alt:"image-20201109105544562"}})]),t._v(" "),a("p",[t._v("其中c"),a("sub",[t._v("n")]),t._v(" = L,c"),a("sub",[t._v("i - 1")]),t._v(" = b"),a("sub",[t._v("i")]),t._v(" × c"),a("sub",[t._v("i")]),t._v(" , 1 < i ≤ n")]),t._v(" "),a("p",[t._v("数组元素的存储位置是其下标的线性函数。")]),t._v(" "),a("h3",{attrs:{id:"矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#矩阵"}},[t._v("#")]),t._v(" 矩阵")]),t._v(" "),a("h4",{attrs:{id:"特殊矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊矩阵"}},[t._v("#")]),t._v(" 特殊矩阵")]),t._v(" "),a("h5",{attrs:{id:"特殊矩阵的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊矩阵的概念"}},[t._v("#")]),t._v(" 特殊矩阵的概念")]),t._v(" "),a("p",[t._v("特殊矩阵指元素（特别是非零元素）在矩阵中的分布有一定规则\n例如：")]),t._v(" "),a("ul",[a("li",[t._v("对称矩阵")]),t._v(" "),a("li",[t._v("三角矩阵")]),t._v(" "),a("li",[t._v("三对角矩阵")])]),t._v(" "),a("h5",{attrs:{id:"对称矩阵的压缩存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对称矩阵的压缩存储"}},[t._v("#")]),t._v(" 对称矩阵的压缩存储")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109110027486.png",alt:"image-20201109110027486"}})]),t._v(" "),a("h5",{attrs:{id:"三角矩阵的压缩存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三角矩阵的压缩存储"}},[t._v("#")]),t._v(" 三角矩阵的压缩存储")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109110107030.png",alt:"image-20201109110107030"}})]),t._v(" "),a("h5",{attrs:{id:"对角矩阵的压缩存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对角矩阵的压缩存储"}},[t._v("#")]),t._v(" 对角矩阵的压缩存储")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109110139603.png",alt:"image-20201109110139603"}})]),t._v(" "),a("h4",{attrs:{id:"稀疏矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#稀疏矩阵"}},[t._v("#")]),t._v(" 稀疏矩阵")]),t._v(" "),a("h5",{attrs:{id:"稀疏矩阵的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#稀疏矩阵的基本概念"}},[t._v("#")]),t._v(" 稀疏矩阵的基本概念")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109110229377.png",alt:"image-20201109110229377"}})]),t._v(" "),a("p",[t._v("稀疏矩阵是非零元素个数远远少于矩阵元素个数的矩阵")]),t._v(" "),a("ul",[a("li",[t._v("以常规方法，即以二维数组表示高阶的稀疏矩阵时产生的问题：\n"),a("ol",[a("li",[t._v("零值元素占了很大空间")]),t._v(" "),a("li",[t._v("计算中进行了很多和零值的运算，遇除法，还需判别除数是否为零")])])])]),t._v(" "),a("p",[t._v("解决问题的原则")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("尽可能少存或不存零值元素；")])]),t._v(" "),a("li",[a("p",[t._v("尽可能减少没有实际意义的运算；")])]),t._v(" "),a("li",[a("p",[t._v("操作方便。 即能尽可能快地找到与下标值( i , j ) 对应的元素，")])])]),t._v(" "),a("h5",{attrs:{id:"稀疏矩阵的基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#稀疏矩阵的基本操作"}},[t._v("#")]),t._v(" 稀疏矩阵的基本操作")]),t._v(" "),a("ol",[a("li",[t._v("int GetRows () const\n"),a("ul",[a("li",[t._v("初始条件：稀疏矩阵已存在。")]),t._v(" "),a("li",[t._v("操作结果：返回稀疏矩阵行数。")])])]),t._v(" "),a("li",[t._v("int GetCols () const\n"),a("ul",[a("li",[t._v("初始条件：稀疏矩阵已存在。")]),t._v(" "),a("li",[t._v("操作结果：返回稀疏矩阵列数。")])])]),t._v(" "),a("li",[t._v("int GetNum () const\n"),a("ul",[a("li",[t._v("初始条件：稀疏矩阵已存在。")]),t._v(" "),a("li",[t._v("操作结果：返回稀疏矩阵非零元素个数。")])])]),t._v(" "),a("li",[t._v("bool Empty() const\n"),a("ul",[a("li",[t._v("初始条件：稀疏矩阵已存在。")]),t._v(" "),a("li",[t._v("操作结果：如稀疏矩阵为空，则返回 true否则返回 false")])])]),t._v(" "),a("li",[t._v("bool SetElem(int r, int c, constElemType &v)\n"),a("ul",[a("li",[t._v("初始条件：稀疏矩阵已存在。")]),t._v(" "),a("li",[t._v("操作结果：设置指定位置的元素值。")])])]),t._v(" "),a("li",[t._v("bool GetElem(int r, int c, ElemType &v)\n"),a("ul",[a("li",[t._v("初始条件：稀疏矩阵已存在。")]),t._v(" "),a("li",[t._v("操作结果：求指定位置的元素值。")])])])]),t._v(" "),a("h4",{attrs:{id:"稀疏矩阵的存储方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#稀疏矩阵的存储方式"}},[t._v("#")]),t._v(" 稀疏矩阵的存储方式")]),t._v(" "),a("ul",[a("li",[t._v("稀疏矩阵的顺序压缩存储\n"),a("ul",[a("li",[t._v("三元组表示法")])])]),t._v(" "),a("li",[t._v("稀疏矩阵的链式压缩存储\n"),a("ul",[a("li",[t._v("十字链表")])])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("三元组顺序表")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当稀疏矩阵的阶很高时，如采用一般矩阵的存储方法将浪费大量的存储空间。")])]),t._v(" "),a("li",[a("p",[t._v("一种直观、常用的方法是，对每个非零元素，用三元组（行号，列号，元素值）来表示，这样每个元素的信息就全部记录下来了。")])]),t._v(" "),a("li",[a("p",[t._v("以顺序表存储三元组表，可得到稀疏矩阵的顺序存储结构——三元组顺序表")])]),t._v(" "),a("li",[a("p",[t._v("在三元组顺序表中，用三元组表表示稀疏矩阵时，为避免丢失信息，增设了一个信息元组，形式为：")]),t._v(" "),a("center",[t._v("（行数，列数，非零元素个数）")])],1)]),t._v(" "),a("p",[t._v("三元组顺序表示例")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109111255309.png",alt:"image-20201109111255309"}})])]),t._v(" "),a("li",[a("p",[t._v("十字链表")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109111330736.png",alt:"image-20201109111330736"}})])])]),t._v(" "),a("h3",{attrs:{id:"广义表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#广义表"}},[t._v("#")]),t._v(" 广义表")]),t._v(" "),a("h4",{attrs:{id:"广义表基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#广义表基础"}},[t._v("#")]),t._v(" 广义表基础")]),t._v(" "),a("ol",[a("li",[t._v("广义表的概念，广义表通常简称为表，由 n(≥0)个表元素组成的有限序列 记作 GL =(a"),a("sub",[t._v("1")]),t._v(", a"),a("sub",[t._v("2")]),t._v(", a"),a("sub",[t._v("3")]),t._v(" , …, a"),a("sub",[t._v("n")]),t._v(")，GL 是表名，a"),a("sub",[t._v("i")]),t._v("为表元素，简称为元素，它可以是表（称为子表元素，简称为子表），可以是数据元素（称为原子元素，简称为原子）")]),t._v(" "),a("li",[t._v("n 为表的长度。 n = 0 的广义表为空表")]),t._v(" "),a("li",[t._v("n > 0 时，表的第一个表元素称为广义表的表头(head)，除此之外，其它表元素组成的表称为广义表的表尾(tail)")])]),t._v(" "),a("p",[t._v("由于广义表中的元素又可以是广义表，因此对于广义表有深度的概念。广义表 GL 的深度 Depth(GL) 定义如下："),a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109111940655.png",alt:"image-20201109111940655"}})]),t._v(" "),a("p",[t._v("广义表的深度本质上就是广义表表达式中括号的最大嵌套层数。例如：")]),t._v(" "),a("div",{staticClass:"language-txt extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2\t\t\t\t深度为 0( 括号层数为 0)\n()\t\t\t\t深度为 1( 括号层数为 1)\n(2,(3,6))\t\t深度为 2( 括号层数为 2)\n")])])]),a("p",[t._v("求广义表的深度")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109112136284.png",alt:" "}})]),t._v(" "),a("h2",{attrs:{id:"第-6-章-树和二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-6-章-树和二叉树"}},[t._v("#")]),t._v(" 第 6 章 树和二叉树")]),t._v(" "),a("h3",{attrs:{id:"树的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的基本概念"}},[t._v("#")]),t._v(" 树的基本概念")]),t._v(" "),a("h4",{attrs:{id:"树的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的定义"}},[t._v("#")]),t._v(" 树的定义")]),t._v(" "),a("p",[t._v("D是具有相同特性的数据元素的集合。若D为空集，则称为空树。\n否则：")]),t._v(" "),a("ul",[a("li",[t._v("在 D 中存在唯一的称为根的数据元素 root")]),t._v(" "),a("li",[t._v("当 n>1 时，其余结点可分为 m (m>0) 个互不相交的有限集 T "),a("sub",[t._v("1")]),t._v(" , T"),a("sub",[t._v("2")]),t._v(" , …, T"),a("sub",[t._v("m")]),t._v(" ，其中每一子集本身又是符合本定义的树，称为根root的子树 。")])]),t._v(" "),a("h4",{attrs:{id:"基本术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本术语"}},[t._v("#")]),t._v(" 基本术语")]),t._v(" "),a("ul",[a("li",[t._v("结点\n"),a("ul",[a("li",[t._v("数据元素+若干指向子树的分支")])])]),t._v(" "),a("li",[t._v("结点的度\n"),a("ul",[a("li",[t._v("分支的个数")])])]),t._v(" "),a("li",[t._v("树的度\n"),a("ul",[a("li",[t._v("树中所有结点的度的最大值")])])]),t._v(" "),a("li",[t._v("叶子结点\n"),a("ul",[a("li",[t._v("度为零的结点")])])]),t._v(" "),a("li",[t._v("分支结点\n"),a("ul",[a("li",[t._v("度大于零的结点")])])])]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph TD\nD--\x3eH\nD--\x3eI\nD--\x3eJ\nJ--\x3eM\n")])])]),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph TD\nA--\x3eB\nB--\x3eE\nB--\x3eF\nF--\x3eK\nF--\x3eL\nA--\x3eC\nC--\x3eG\nA--\x3eD\nD--\x3eH\nD--\x3eI\nD--\x3eJ\nJ--\x3eM\n")])])]),a("ul",[a("li",[t._v("结点的层次：\n"),a("ul",[a("li",[t._v("假设根结点的层次为1 ，第 l 层的结点的子树根结点的层次为 l+1")])])]),t._v(" "),a("li",[t._v("树的深度\n"),a("ul",[a("li",[t._v("树中叶子结点所在的最大层次称为树的深度，简称为树的深 ，也称树的高度 ，也可简称为树的高")])])]),t._v(" "),a("li",[t._v("(从根到结点的)路径\n"),a("ul",[a("li",[t._v("由从根到该结点所经分支和结点构成")])])]),t._v(" "),a("li",[t._v("孩子结点")]),t._v(" "),a("li",[t._v("双亲结点")]),t._v(" "),a("li",[t._v("兄弟结点")]),t._v(" "),a("li",[t._v("堂兄弟结点")]),t._v(" "),a("li",[t._v("祖先结点")]),t._v(" "),a("li",[t._v("子孙结点")])]),t._v(" "),a("p",[t._v("森林")]),t._v(" "),a("p",[t._v("是m(m≥0)棵互不相交的树的集合")]),t._v(" "),a("p",[t._v("任何一棵非空树是一个二元组")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Tree = （root,F)")]),t._v(" "),a("ul",[a("li",[t._v("root 被称为根结点")]),t._v(" "),a("li",[t._v("F被称为子树森林")])])]),t._v(" "),a("li",[a("p",[t._v("有序树")]),t._v(" "),a("ul",[a("li",[t._v("子树之间存在确定的次序关系")])])]),t._v(" "),a("li",[a("p",[t._v("无序树")]),t._v(" "),a("ul",[a("li",[t._v("子树之间不存在确定的次序关系")])])])]),t._v(" "),a("h3",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),a("h4",{attrs:{id:"二叉树基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树基础"}},[t._v("#")]),t._v(" 二叉树基础")]),t._v(" "),a("h4",{attrs:{id:"二叉树的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的定义"}},[t._v("#")]),t._v(" 二叉树的定义")]),t._v(" "),a("p",[t._v("二叉树或为空树 ，或是由一个根结点加上两棵分别称为左子树和右子树的、互不交叉的二叉树组成")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201028112046627.png",alt:"image-20201028112046627"}})]),t._v(" "),a("h4",{attrs:{id:"二叉树的五种基本形态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的五种基本形态"}},[t._v("#")]),t._v(" 二叉树的五种基本形态")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201028112152219.png",alt:"image-20201028112152219"}})]),t._v(" "),a("h4",{attrs:{id:"二叉树的主要基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的主要基本操作"}},[t._v("#")]),t._v(" 二叉树的主要基本操作")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("BinTreeNode<ElemType> *GetRoot() const")])]),t._v(" "),a("ul",[a("li",[t._v("初始条件：二叉树已存在。")]),t._v(" "),a("li",[t._v("操作结果：返回二叉树的根。")])])]),t._v(" "),a("li",[a("p",[t._v("bool Empty() const")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：二叉树已存在。")]),t._v(" "),a("li",[t._v("操作结果：如二叉树为空，则返回true ，否则返回false 。")])])]),t._v(" "),a("li",[a("p",[t._v("bool GetElem TreeNode ElemType > *cur,ElemType &e) const")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：二叉树已存在， cur 为二叉树的一个结点。")]),t._v(" "),a("li",[t._v("操作结果：用 e 返回结点 cur 元素值 如果不存在结点 cur,返回 NOT_PRESENT, 否则返回 ENTRY_FOUND 。")])])]),t._v(" "),a("li",[a("p",[t._v("bool SetElem TreeNode ElemType > *cur, const ElemType &")]),t._v(" "),a("ul",[a("li",[t._v("初始条件：二叉树已存在， cur 为二叉树的一个结点。")]),t._v(" "),a("li",[t._v("操作结果：如果存在结点 cur, 则返回 FAIL, 否则返回SUCCESS, 并将结点 cur 的值设置为 e 。")])])])]),t._v(" "),a("h4",{attrs:{id:"二叉树的性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的性质"}},[t._v("#")]),t._v(" 二叉树的性质")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("性质1\n在二叉树的第"),a("code",[t._v("i")]),t._v("层上至多有 2"),a("sup",[t._v("i-1")]),t._v(" 个结点 。 (i>=1)")]),t._v(" "),a("ul",[a("li",[t._v("用归纳法证明\n"),a("ul",[a("li",[t._v("归纳基础:i = 1 层时，最多只有一个根结点：2"),a("sup",[t._v("i-1")]),t._v("=2"),a("sup",[t._v("0")]),t._v("=1")]),t._v(" "),a("li",[t._v("归纳假设：假设对所有的j, 1 ≤ j < i 命题成立；")]),t._v(" "),a("li",[t._v("归纳证明：二叉树上每个结点至多有两棵子树，则第"),a("code",[t._v("i")]),t._v("层的结点数≤ 2"),a("sup",[t._v("i-2")]),t._v(" * 2 = 2"),a("sup",[t._v("i-1")]),t._v(" 。")])])])])]),t._v(" "),a("li",[a("p",[t._v("性质2：\n高度为 k 的二叉树上至多含 2"),a("sup",[t._v("k")]),t._v(" - 1个结点（ k 1 ）。\n证明：\n基于上一条性质，高度为 k 的二叉树上的结点数至多为\n2"),a("sup",[t._v("0")]),t._v("+2"),a("sup",[t._v("1")]),t._v("+...+2"),a("sup",[t._v("k-1")]),t._v("=2"),a("sup",[t._v("k")]),t._v("-1。")])]),t._v(" "),a("li",[a("p",[t._v("性质3：\n对任何一棵二叉树，若它含有 n"),a("sub",[t._v("0")]),t._v("个叶子结点、 n"),a("sub",[t._v("2")]),t._v("个度为2的结点，则必存在关系式：")]),t._v(" "),a("p",[t._v("n"),a("sub",[t._v("0")]),t._v(" = n"),a("sub",[t._v("2")]),t._v(" +1\n证明：\n设结点总数为 n ，度为 1 的结点数为 n"),a("sub",[t._v("1")]),t._v(" ，分支数为b，则有\nn = n"),a("sub",[t._v("0")]),t._v(" + n"),a("sub",[t._v("1")]),t._v(" + n"),a("sub",[t._v("2")]),t._v("\nb = n"),a("sub",[t._v("1")]),t._v(" +2n"),a("sub",[t._v("2")]),t._v("\n而b = n"),a("sub",[t._v("1")]),t._v(" = n"),a("sub",[t._v("0")]),t._v(" + n"),a("sub",[t._v("1")]),t._v(" + n"),a("sub",[t._v("2")]),t._v("-1 由此可得：\nn"),a("sub",[t._v("0")]),t._v(" = n"),a("sub",[t._v("2")]),t._v(" + 1 。")])])]),t._v(" "),a("p",[t._v("两类特殊的二叉树：")]),t._v(" "),a("ul",[a("li",[t._v("满二叉树\n指的是深度为 k 且含有 2"),a("sup",[t._v("k")]),t._v("-1个结点的二叉树。\n"),a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201102081813644.png",alt:"image-20201102081813644"}})]),t._v(" "),a("li",[t._v("完全二叉树:\n树中所含的 n 个结点和满二叉树中编号为 1 至 n 的结点一一对应。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201102081911775.png",alt:"image-20201102081911775"}})]),t._v(" "),a("ul",[a("li",[t._v("性质4\n具有n 个结点的完全二叉树的深度 为  log 2 n + 1 (向下取整）。\n证明：\n设完全二叉树的深度为 k\n则根据第二条性质得2"),a("sup",[t._v("k-1")]),t._v(" ≤ n < 2"),a("sup",[t._v("k")]),t._v("\n即\nk-1 ≤ log"),a("sub",[t._v("2")]),t._v(" n < k\n因为\nk 只能是整数，因此， k =  log 2 n  + 1 。")]),t._v(" "),a("li",[t._v("性质5\n若对含n个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中任意一个编号为 i 的结点：\n"),a("ol",[a("li",[t._v("若 i=1 ，则该结点是二叉树的根，无双亲，否则，编号为  i/2  的结点为其 双亲 结点；")]),t._v(" "),a("li",[t._v("若 2i>n ，则该结点无左孩子否则，编号为 2i 的结点为其 左孩子 结点；")]),t._v(" "),a("li",[t._v("若 2i+1>n ，则该结点无右孩子结点否则，编号为 2i+1 的结点为其 右孩子 结点 。")])])])]),t._v(" "),a("h2",{attrs:{id:"二叉树的性质-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的性质-2"}},[t._v("#")]),t._v(" 二叉树的性质")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在二叉树的第i层上至多有2"),a("sup",[t._v("i-1")]),t._v("个结点(i>=1)")])]),t._v(" "),a("li",[a("p",[t._v("深度为k的二叉树至多有2"),a("sup",[t._v("k")]),t._v("-1个结点(k>=1)")])]),t._v(" "),a("li",[a("p",[t._v("对任何一棵二叉树T，如果其终端结点数n"),a("sub",[t._v("0")]),t._v("，度为2的结点数位n"),a("sub",[t._v("2")]),t._v("，则n"),a("sub",[t._v("0")]),t._v("=n"),a("sub",[t._v("2")]),t._v("+1")])]),t._v(" "),a("li",[a("p",[t._v("具有n个结点的完全二叉树的深度为log"),a("sub",[t._v("2")]),t._v("n」+1（不大于x的最大整数）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果对一棵有 n 个结点的完全二叉树(其深度为[log (2) n] + 1) 的结点按层序编号(从第1层到第[log (2) n] + 1 层,每一层从左到右),对任一结点i (1 <= i <= n) 有:")])]),t._v(" "),a("li",[a("p",[t._v(",lo如果 i = 1 ,则结点i是二叉树的根,无双亲;如果i > 1,则其双亲是结点 [ i /2 ];")])]),t._v(" "),a("li",[a("p",[t._v("如果2i > n,则结点i无左孩子(结点i为叶子结点);否则其左孩子是结点2i;")])]),t._v(" "),a("li",[a("p",[t._v("如果2i +1 > n,则结点i无右孩子;否则其右孩子是结点2i +1;")])])])])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#include<iostream>\nusing namespace std;\nstruct node\n{\n\tchar data;\n\tnode* left=nullptr;\n\tnode* right=nullptr;\n};\nvoid CreateBitree(node* &root);\nvoid PreOrderTraverse(node* root);\nvoid InOrderTraverse(node* root);\nvoid PostOrderTraverse(node* root);\nint main()\n{\nrt\n\t//AB#D##C##\n\tnode* root=new node;\n\tCreateBitree(root);\n\tPreOrderTraverse(root);\n\tcout << endl;\n\tInOrderTraverse(root);\n\tcout << endl;\n\tPostOrderTraverse(root);\n\tcout << endl;\n}\nvoid CreateBitree(node* &root)\n{\n\tchar c;\n\tcin >> c;\n\tif (c == '#')\n\t\treturn;\n\telse\n\t{\n\t\troot = new node;\n\t\troot->data = c;\n\t\troot->left = nullptr;\n\t\troot->right = nullptr;\n\t\tCreateBitree(root->left);\n\t\tCreateBitree(root->right);\n\t}\n}\nvoid PreOrderTraverse(node* root)\n{\n\tif (!root)\n\t\treturn;\n\tcout << root->data;\n\tPreOrderTraverse(root->left);\n\tPreOrderTraverse(root->right);\n}\nvoid InOrderTraverse(node* root)\n{\n\tif (!root)\n\t\treturn;\n\tInOrderTraverse(root->left);\n\tcout << root->data;\n\tInOrderTraverse(root->right);\n}\nvoid PostOrderTraverse(node* root)\n{\n\tif (!root)\n\t\treturn;\n\tPostOrderTraverse(root->left);\n\tPostOrderTraverse(root->right);\n\tcout << root->data;\n}\n\n")])])]),a("p",[t._v("无向边用()表示，有向边用<>表示")]),t._v(" "),a("h4",{attrs:{id:"二叉树的存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的存储结构"}},[t._v("#")]),t._v(" 二叉树的存储结构")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("完全二叉树的数组表示")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201102082404405.png",alt:"image-20201102082404405"}})])]),t._v(" "),a("li",[a("p",[t._v("一般二叉树的数组表示")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201102082505378.png",alt:"image-20201102082505378"}})])]),t._v(" "),a("li",[a("p",[t._v("单支树")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201102082528334.png",alt:"image-20201102082528334"}})]),t._v(" "),a("ul",[a("li",[t._v("由于一般二叉树必须仿照完全二叉树那样存储，可能会浪费很多存储空间，单支树就是一个极端情况")])])]),t._v(" "),a("li",[a("p",[t._v("二叉树的链式存储结构\n"),a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201102082708237.png",alt:"image-20201102082708237"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201102082719746.png",alt:"image-20201102082719746"}})])]),t._v(" "),a("li",[a("p",[t._v("最常使用二叉链表作二叉树的存储结构，下面介绍二叉链表的存储结构")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树结点类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinTreeNode")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据成员")]),t._v("\n    ElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据域")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("leftChild "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左孩子")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 右孩子")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinTreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinTreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 已知元素值,指向左右孩子构造结点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树类模板")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树的数据成员")]),t._v("\n\tBinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 辅助函数模板")]),t._v("\n\tBinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyTreeHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制二叉树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DestroyHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁以 r 为根二叉树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InOrderHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 中序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrderHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HeightHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回二叉树的高")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeCountHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回二叉树的结点个数")]),t._v("\n\tBinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ParentHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 cur 的双亲")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树方法声明及重载编译系统默认方法声明")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数的构造函数模板")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 析构函数模板")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetRoot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回二叉树的根")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断二叉树是否为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用 e 返回结点元素值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetElem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将结点 cur的值置为 e")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树的中序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树的先序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PostOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树的后序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LevelOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树的层次遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求二叉树的结点个数")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LeftChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回二叉树结点 cur 的左孩子")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RightChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回二叉树结点 cur 的右孩子")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回二叉树结点 cur 的双亲")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InsertLeftChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入左孩子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InsertRightChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入右孩子")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DeleteLeftChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除左子树")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DeleteRightChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除右子树")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 求二叉树的高")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 建立以 e 为根的二叉树")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinaryTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制构造函数模板")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 建立以 r 为根的二叉树")]),t._v("\n\tBinaryTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinaryTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重载赋值运算符")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"二叉树遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树遍历"}},[t._v("#")]),t._v(" 二叉树遍历")]),t._v(" "),a("h4",{attrs:{id:"遍历的定义及遍历算法的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历的定义及遍历算法的实现"}},[t._v("#")]),t._v(" 遍历的定义及遍历算法的实现")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("顺着某一条搜索路径巡访二叉树中的结点，使得每个结点均被访问一次，而且仅被访问一次")])]),t._v(" "),a("li",[a("p",[t._v("“访问”的含义可以很广，如：输出结点的信息等")])]),t._v(" "),a("li",[a("p",[t._v("”遍历“是任何类型均有的操作，对线性结构而言，只有一条搜索路径（因为每个结点均只有一个后继），故不需要另加讨论。而二叉树是非线性结构，每个结点最多有两个孩子，则存在如何遍历即按什么样的搜索路径遍历的问题")])]),t._v(" "),a("li",[a("p",[t._v("对“二叉树”而言 可以有三类搜索路径\n（1） 先上后下 的按层次遍历\n（2） 先左（子树）后右（子树）的遍历\n（3） 先右（子树）后左（子树）的遍历")]),t._v(" "),a("p",[t._v("设\t\t访问根结点 \t\t\t\t\t记作 V\n遍历根的左子树\t\t\t记作 L")]),t._v(" "),a("p",[t._v("​\t\t\t遍历根的右子树\t\t\t记作 R\n则可能的遍历次序有\n前序 VLR 逆前序 VRL\n中序 LVR 逆中序 RVL\n后序 LRV 逆后序 RLV\n层次遍历")])])]),t._v(" "),a("h4",{attrs:{id:"前序遍历-preorder-traversal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前序遍历-preorder-traversal"}},[t._v("#")]),t._v(" 前序遍历 (Preorder Traversal)")]),t._v(" "),a("ul",[a("li",[t._v("若二叉树为空，则空操作")]),t._v(" "),a("li",[t._v("否则\n"),a("ul",[a("li",[t._v("访问根结点 (V)")]),t._v(" "),a("li",[t._v("前序遍历左子树 (L)")]),t._v(" "),a("li",[t._v("前序遍历右子树 (R)")])])])]),t._v(" "),a("div",{staticClass:"language-CPP extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：先序遍历以 r 为根的二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问根结点")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历左子树")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历右子树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：先序遍历二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PreOrderHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"中序遍历-inorder-traversal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历-inorder-traversal"}},[t._v("#")]),t._v(" 中序遍历 (Inorder Traversal)")]),t._v(" "),a("ul",[a("li",[t._v("若二叉树为空，则空操作")]),t._v(" "),a("li",[t._v("否则\n"),a("ul",[a("li",[t._v("中序遍历左子树 (L)")]),t._v(" "),a("li",[t._v("访问根结点 (V)")]),t._v(" "),a("li",[t._v("中序遍历右子树 (R)")])])])]),t._v(" "),a("h4",{attrs:{id:"后序遍历-postorder-traversal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历-postorder-traversal"}},[t._v("#")]),t._v(" 后序遍历 (Postorder Traversal)")]),t._v(" "),a("ul",[a("li",[t._v("若二叉树为空，则空操作")]),t._v(" "),a("li",[t._v("否则\n"),a("ul",[a("li",[t._v("后序遍历左子树 (L)")]),t._v(" "),a("li",[t._v("后序遍历右子树 (R)")]),t._v(" "),a("li",[t._v("访问根结点 (V)")])])])]),t._v(" "),a("h4",{attrs:{id:"层次遍历-levelorder-traversal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#层次遍历-levelorder-traversal"}},[t._v("#")]),t._v(" 层次遍历 (Levelorder Traversal)")]),t._v(" "),a("p",[t._v("从上到下，从左到右")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LevelOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：层次遍历二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    LinkQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果根非空 则入队")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// q 非空,说明还有结点未访问")]),t._v("\n        q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("OutQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左孩子非空")]),t._v("\n        \tq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左孩子入队")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 右孩子非空")]),t._v("\n        \tq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("InQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 右孩子入队")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"二叉树中序遍历非递归算法的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树中序遍历非递归算法的实现"}},[t._v("#")]),t._v(" 二叉树中序遍历非递归算法的实现")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GoFarLeft")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("LinkStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：返回以r为根的二叉树的最左侧的结点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空二叉树")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非空二叉树")]),t._v("\n    \tBinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前结点")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur存在左孩子,则cur移向左孩子")]),t._v("\n            s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur入栈")]),t._v("\n            cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur移向左孩子")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur为最左侧的结点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NonRecurInOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinaryTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：中序遍历以r为根的二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前结点")]),t._v("\n    LinkStack"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GoFarLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetRoot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur为以r为根的二叉树的最左侧的结点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理当前结点")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("visit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问当前结点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur的中序序列后继为右子树的最左侧的结点")]),t._v("\n        \tcur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GoFarLeft")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cur的中序序列后继为栈s的栈顶结点")]),t._v("\n            s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取出栈顶结点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈s为空,无中序序列后继")]),t._v("\n            cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无中序序列后继")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),a("h4",{attrs:{id:"由中缀表达式建立对应的二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#由中缀表达式建立对应的二叉树"}},[t._v("#")]),t._v(" 由中缀表达式建立对应的二叉树")]),t._v(" "),a("p",[t._v("对应中缀表达式 (a+b)×c-d/e 的二叉树")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109164538401.png",alt:"image-20201109164538401"}})]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("操作数为叶子结点")]),t._v(" "),a("li",[t._v("运算符为分支结点")])]),t._v(" "),a("p",[t._v("分析表达式和二叉树的关系")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109164628587.png",alt:"image-20201109164628587"}})]),t._v(" "),a("h4",{attrs:{id:"二叉树的计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的计数"}},[t._v("#")]),t._v(" 二叉树的计数")]),t._v(" "),a("p",[t._v("问题是有n个数据值，可能构造 多少种不同的二叉树？这就是二叉树 的计数问题。")]),t._v(" "),a("p",[t._v("有0个, 1个, 2个, 3个结点的不同二叉树如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109164710873.png",alt:"image-20201109164710873"}})]),t._v(" "),a("p",[t._v("计算具有n个结点的不同二叉树的棵数")]),t._v(" "),a("p",[t._v("卡特兰（Catalan）公式")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109164745523.png",alt:"image-20201109164745523"}})]),t._v(" "),a("p",[t._v("具有4个结点的不同二叉树")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109164756811.png",alt:"image-20201109164756811"}})]),t._v(" "),a("h4",{attrs:{id:"遍历算法的应用举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历算法的应用举例"}},[t._v("#")]),t._v(" 遍历算法的应用举例")]),t._v(" "),a("h5",{attrs:{id:"统计二叉树中结点的个数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统计二叉树中结点的个数"}},[t._v("#")]),t._v(" 统计二叉树中结点的个数")]),t._v(" "),a("p",[t._v("算法基本思想:")]),t._v(" "),a("ul",[a("li",[t._v("二叉树的结点个数等于左子树的结点 数加上右子树的结点数再加上根结点数1， 因此求二叉树的结点数的问题可以分解为计算其左右子树的结点数目问题")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeCountHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：返回以r为根的二叉树的结点个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空二叉数结点个数为0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeCountHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeCountHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结点个为左右子树的结点数和再加1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：返回二叉树的结点个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeCountHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"求二叉树的高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求二叉树的高"}},[t._v("#")]),t._v(" 求二叉树的高")]),t._v(" "),a("p",[t._v("算法基本思想: 首先分析二叉树的高和它的左、右子树高之间的关系。")]),t._v(" "),a("p",[t._v("从二叉树高的定义可知，二叉树的高应为其左、右子树高的最大值加1。由此，需先分别求得左、右子树的高，算法中 “访问结点”的操作为：求得左、右子树高的最大值，然后加 1 。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HeightHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：返回以r为根的二叉树的高")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空二叉树高为0")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非空二叉树高为左右子树高的最大值再加1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lHeight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rHeight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        lHeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HeightHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//左子树高")]),t._v("\n        rHeight"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HeightHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//右子树高")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lHeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" rHeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" lHeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" rHeight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 高为左右子树高的最大值加1")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：返回二叉树的高")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HeightHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"二叉树的复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的复制"}},[t._v("#")]),t._v(" 二叉树的复制")]),t._v(" "),a("p",[t._v("首先讨论二叉树复制其基本操作为：生成一个结点。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109165231146.png",alt:"image-20201109165231146"}})]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nBinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyTreeHelp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：将以r为根的二叉树复制成新的二叉树,返回新二叉树的根")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制空二叉树")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空二叉树根为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制非空二叉树")]),t._v("\n        BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制左子树")]),t._v("\n\t\tBinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rChild "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制右子树")]),t._v("\n\t\tBinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制根结点")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\nBinaryTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//操作结果:由已知二叉树构造新二叉树——复制构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\troot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CopyTreeHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"建立二叉树的存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建立二叉树的存储结构"}},[t._v("#")]),t._v(" 建立二叉树的存储结构")]),t._v(" "),a("p",[t._v("由二叉树的先序和中序序列建立二叉树")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateBinaryTreeHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" preLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" preRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" inLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" inRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：已知二叉树的先序序列pre[preLeft..preRight]和中序序列in[inLeft..inRight]构造以r为树的二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("preLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" preRight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" inLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" inRight "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树无结点,空二叉树")]),t._v("\n    \tr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空二叉树根为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树有结点,非空二叉树")]),t._v("\n        r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("preLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成根结点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("preLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找pre[preLeft]在in[]中的位置也就是中序序列中根的位置")]),t._v("\n        \tmid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateBinaryTreeHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("leftChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("preLeft"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" inLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("inLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成左子树")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateBinaryTreeHelp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rightChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("preLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" inLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" preRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inRight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成右子树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElemType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nBinaryTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateBinaryTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ElemType pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ElemType in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作结果：已知先序和中序序列构造二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    BinTreeNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树的根")]),t._v("\n    CreateBinaryTreeHelp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由先序和中序序列构造以r为根的二叉树")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" BinaryTree"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ElemType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回以r为根的二叉树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"线索二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线索二叉树"}},[t._v("#")]),t._v(" 线索二叉树")]),t._v(" "),a("p",[t._v("遍历二叉树的结果是， 求得结点的一个线性序列")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109173030751.png",alt:"image-20201109173030751"}})]),t._v(" "),a("p",[t._v("指向该线性序列中的“前驱”和 “后继” 的指针，称作“线索”")]),t._v(" "),a("ul",[a("li",[t._v("包含 “线索” 的存储结构，称作 “线索链表”")]),t._v(" "),a("li",[t._v("与其相应的二叉树， 称作 “线索二叉树”")])]),t._v(" "),a("p",[t._v("对线索链表中结点的约定")]),t._v(" "),a("p",[t._v("在二叉链表的结点中增加两个标志域 leftTag和rightTag,并作如下规定:")]),t._v(" "),a("ul",[a("li",[t._v("若该结点的左子树不空，leftChild域 的指针指向其左孩子，且左标志 leftTag的值为0")]),t._v(" "),a("li",[t._v("否则leftChild域的指针指向其“前 驱”，且左标志leftTag的值为1")])]),t._v(" "),a("table",[a("tr",[a("td",[t._v("leftChild")]),t._v(" "),a("td",[t._v("leftTag")]),t._v(" "),a("td",[t._v("data")]),t._v(" "),a("td",[t._v("rightTag")]),t._v(" "),a("td",[t._v("rightChild")])])]),t._v(" "),a("p",[t._v("若该结点的右子树不空")]),t._v(" "),a("ul",[a("li",[t._v("则rightChild域的指针指向其右孩子， 且右标志rrighTag的值为0")]),t._v(" "),a("li",[t._v('否则，rightChild域的指针指向其“后继”，且右标志rightTag的值为1,如此定义的二叉树的存储结构称作 “线索链表"')])]),t._v(" "),a("p",[t._v("中序线索二叉树")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109173843398.png",alt:"image-20201109173843398"}})]),t._v(" "),a("p",[t._v("不带表头结点的中序线索二叉树示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109173901787.png",alt:"image-20201109173901787"}})]),t._v(" "),a("p",[t._v("带表头结点的中序线索二叉树 示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109173915126.png",alt:"image-20201109173915126"}})]),t._v(" "),a("h3",{attrs:{id:"树和森林"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树和森林"}},[t._v("#")]),t._v(" 树和森林")]),t._v(" "),a("h4",{attrs:{id:"树的存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的存储结构"}},[t._v("#")]),t._v(" 树的存储结构")]),t._v(" "),a("ol",[a("li",[t._v("双亲表示法")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109210633359.png",alt:"image-20201109210633359"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("孩子链表表示法")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109210724787.png",alt:"image-20201109210724787"}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("孩子兄弟表示法")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109210758240.png",alt:"image-20201109210758240"}})])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109210815959.png",alt:"image-20201109210815959"}})]),t._v(" "),a("p",[t._v("由此，树的各种操作均可对应二叉树的操作来完成。")]),t._v(" "),a("p",[t._v("应当注意的是，和树对应的二叉树，其左、右孩子的概念已改变为： 左是树中第一个孩子， 右是树中下一个兄弟。")]),t._v(" "),a("h4",{attrs:{id:"森林与二叉树的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#森林与二叉树的转换"}},[t._v("#")]),t._v(" 森林与二叉树的转换")]),t._v(" "),a("ul",[a("li",[t._v("森林由三部分构成\n"),a("ol",[a("li",[t._v("森林中第一棵树的根结点")]),t._v(" "),a("li",[t._v("森林中第一棵树的子树森林")]),t._v(" "),a("li",[t._v("森林中其它树构成的森林")])])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("森林转化成二叉树的规则")]),t._v(" "),a("p",[t._v("设二叉树B的根为root(B)，左子树为LB，右子树为RB，森林F由树T"),a("sub",[t._v("1")]),t._v(" ,T"),a("sub",[t._v("2")]),t._v(" ,…,T"),a("sub",[t._v("n")]),t._v("组成。")]),t._v(" "),a("ul",[a("li",[t._v("若F为空，即n = 0，则对应的二叉树B为空二叉树")]),t._v(" "),a("li",[t._v("若F不空，则对应二叉树B的根root(B) 是F中第一棵树T"),a("sub",[t._v("1")]),t._v("的根root(T"),a("sub",[t._v("1")]),t._v(")，其左子树LB由(T"),a("sub",[t._v("11")]),t._v(", T"),a("sub",[t._v("12")]),t._v(", …, T"),a("sub",[t._v("1m")]),t._v(")转化而来，其中T"),a("sub",[t._v("11")]),t._v(", T"),a("sub",[t._v("12")]),t._v(",…, T"),a("sub",[t._v("1m")]),t._v("是root(T"),a("sub",[t._v("1")]),t._v(" )的子树；其右子树RB 由(T"),a("sub",[t._v("2")]),t._v(" , T"),a("sub",[t._v("3")]),t._v(" , …, T"),a("sub",[t._v("n")]),t._v(" )转化而来，其中，T"),a("sub",[t._v("2")]),t._v(" ,T"),a("sub",[t._v("3")]),t._v(" ,… , T"),a("sub",[t._v("n")]),t._v("是除T"),a("sub",[t._v("1")]),t._v("外其它树构成的森林")])])]),t._v(" "),a("li",[a("p",[t._v("二叉树转换为森林的规则")]),t._v(" "),a("p",[t._v("设二叉树B的根为root(B)，左子树为LB，右子树为RB，森林F由树T"),a("sub",[t._v("1")]),t._v(" ,T"),a("sub",[t._v("2")]),t._v(" ,…,T"),a("sub",[t._v("n")]),t._v("组成。")]),t._v(" "),a("ul",[a("li",[t._v("如果B为空，则对应的森林F也为空")]),t._v(" "),a("li",[t._v("如果B非空，则F中第一棵树T"),a("sub",[t._v("1")]),t._v("的根为root(B)；T1的根 的子树森林(T"),a("sub",[t._v("11")]),t._v(", T"),a("sub",[t._v("12")]),t._v(", …, T"),a("sub",[t._v("1m")]),t._v(" ) 是由 root(B)的左子树LB转换而来，F 除了T"),a("sub",[t._v("1")]),t._v("之外其余的树组成的森林(T"),a("sub",[t._v("2")]),t._v(" , T"),a("sub",[t._v("3")]),t._v(" , …, T"),a("sub",[t._v("n")]),t._v(" )是由root(B)的右子树RB转换而成的森林")])])]),t._v(" "),a("li",[a("p",[t._v("森林与二叉树的转换示例")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109220432675.png",alt:"image-20201109220432675"}})])])]),t._v(" "),a("h5",{attrs:{id:"树、森林与二叉树的转换-大话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树、森林与二叉树的转换-大话"}},[t._v("#")]),t._v(" 树、森林与二叉树的转换（大话）")]),t._v(" "),a("h6",{attrs:{id:"树转换为二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树转换为二叉树"}},[t._v("#")]),t._v(" 树转换为二叉树")]),t._v(" "),a("ol",[a("li",[t._v("加线\n"),a("ul",[a("li",[t._v("在所有兄弟结点之间加一条线。")])])]),t._v(" "),a("li",[t._v("去线\n"),a("ul",[a("li",[t._v("对树中的每个节点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线。")])])]),t._v(" "),a("li",[t._v("层次调整\n"),a("ul",[a("li",[t._v("以树的根节点为轴心，将整棵树顺时针旋转一定的角度，使之结构层次分明。\n"),a("strong",[t._v("注意第一个孩子是二叉树结点的左孩子，兄弟转换过来的孩子是结点的右孩子")])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201110202444986.png",alt:"image-20201110202444986"}})]),t._v(" "),a("h6",{attrs:{id:"森林转换为二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#森林转换为二叉树"}},[t._v("#")]),t._v(" 森林转换为二叉树")]),t._v(" "),a("p",[t._v("森林是由若干棵树组成的，所以完全可以理解为，森林中的每一棵树都是兄弟，可以按照兄弟的处理办法来操作。步骤如下:")]),t._v(" "),a("ol",[a("li",[t._v("把每棵树转化为二叉树。")]),t._v(" "),a("li",[t._v("第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根节点作为前一棵二叉树的根节点的右孩子，用线连接起来。当所有的二叉树连接起来后就得到了由森林转换来的二叉树。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201110202923606.png",alt:"image-20201110202923606"}})]),t._v(" "),a("h6",{attrs:{id:"二叉树转换为树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树转换为树"}},[t._v("#")]),t._v(" 二叉树转换为树")]),t._v(" "),a("ol",[a("li",[t._v("加线。若某结点的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的右孩子节点。。。左孩子的n个右孩子结点都作为此结点的孩子。将该结点与这些右孩子连接起来。")]),t._v(" "),a("li",[t._v("去线。删除原二叉树中所有节点与其右孩子结点的连线")]),t._v(" "),a("li",[t._v("层次调整。使之结构层次分明。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201110203404374.png",alt:"image-20201110203404374"}})]),t._v(" "),a("p",[t._v("二叉树转换为森林")]),t._v(" "),a("p",[t._v("判断一棵二叉树能够转换成一棵树还是森林，标准很简单，那就是只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就是一棵树。那么如果是转换成森林，步骤如下:")]),t._v(" "),a("ol",[a("li",[t._v("从根结点开始，若右孩子存在，则把与右孩子结点的连线删除，再查看分离后的二叉树，若右孩子存在,则连线删除……，直到所有右孩子连线都删除为止，得到分离的二叉树。")]),t._v(" "),a("li",[t._v("再将每棵分离后的二叉树转换为树即可。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201110203611894.png",alt:"image-20201110203611894"}})]),t._v(" "),a("h4",{attrs:{id:"树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的遍历"}},[t._v("#")]),t._v(" 树的遍历")]),t._v(" "),a("ul",[a("li",[t._v("树的先根遍历\n"),a("ul",[a("li",[t._v("若树为空，则空操作，结束；否则按如下规则遍历：\n"),a("ol",[a("li",[t._v("访问根结点；")]),t._v(" "),a("li",[t._v("分别先根遍历根的各棵子树。")])])])])]),t._v(" "),a("li",[t._v("树的后根遍历\n"),a("ul",[a("li",[t._v("若树为空，则空操作，结束；否则按如下规则遍历：\n"),a("ol",[a("li",[t._v("分别后根遍历根的各棵子树；")]),t._v(" "),a("li",[t._v("访问根结点。")])])])])])]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph TD\nA--\x3eB\nB--\x3eE\nB--\x3eF\nA--\x3eC\nA--\x3eD\nD--\x3eG--\x3eH--\x3eI\nH--\x3eJ\nH--\x3eK\n")])])]),a("ul",[a("li",[t._v("先根次序遍历 A B E F C D G H I J K")]),t._v(" "),a("li",[t._v("后根次序遍历 E F B C I J K H G D A")])]),t._v(" "),a("h4",{attrs:{id:"森林的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#森林的遍历"}},[t._v("#")]),t._v(" 森林的遍历")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("森林的先根遍历")]),t._v(" "),a("p",[t._v("若森林F为空, 返回")]),t._v(" "),a("p",[t._v("否则:")]),t._v(" "),a("ul",[a("li",[t._v("访问F的第一棵树的根结点")]),t._v(" "),a("li",[t._v("先根次序遍历第一棵树的子树森林")]),t._v(" "),a("li",[t._v("先根次序遍历其它树组成的森林")])])]),t._v(" "),a("li",[a("p",[t._v("森林的中根遍历")]),t._v(" "),a("p",[t._v("若森林F为空，返回")]),t._v(" "),a("p",[t._v("否则:")]),t._v(" "),a("ul",[a("li",[t._v("中根次序遍历第一棵树的子树森林")]),t._v(" "),a("li",[t._v("访问F的第一棵树的根结点")]),t._v(" "),a("li",[t._v("中根次序遍历其它树组成的森林")])])])]),t._v(" "),a("h4",{attrs:{id:"二叉树、树、森林三者遍历比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树、树、森林三者遍历比较"}},[t._v("#")]),t._v(" 二叉树、树、森林三者遍历比较")]),t._v(" "),a("h5",{attrs:{id:"三种遍历方法对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种遍历方法对比"}},[t._v("#")]),t._v(" 三种遍历方法对比")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("二叉树")]),t._v(" "),a("th",[t._v("二叉树")]),t._v(" "),a("th",[t._v("树")]),t._v(" "),a("th",[t._v("森林")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("先序遍历")]),t._v(" "),a("td",[t._v("第一次经过该结点就访问")]),t._v(" "),a("td",[t._v("根访问在前，先访问根结点，后访问其他结点")]),t._v(" "),a("td",[t._v("从左到右对森林中的每一棵树进行【先根遍历】")])]),t._v(" "),a("tr",[a("td",[t._v("中序遍历")]),t._v(" "),a("td",[t._v("第二次经过结点的时候访问")]),t._v(" "),a("td",[t._v("树的度不一定，一般不说中序遍历，但非要谈，那就是"),a("strong",[t._v("第二次经过该结点时进行访问")])]),t._v(" "),a("td",[t._v("森林的中序、后序，只是许多地方说法不一样，实则是一个东西")])]),t._v(" "),a("tr",[a("td",[t._v("后序遍历")]),t._v(" "),a("td",[t._v("第三次经过结点的时间访问")]),t._v(" "),a("td",[t._v("先遍历子树，再访问根结点（先访问子树是空的结点）")]),t._v(" "),a("td",[t._v("从左到右对森林中的每一棵树进行【后根遍历】")])])])]),t._v(" "),a("ul",[a("li",[t._v("若树是用二叉链表的形式存储，那么树的后根遍历，即可对该二叉链表进行中序遍历即可")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("树")]),t._v(" "),a("th",[t._v("森林")]),t._v(" "),a("th",[t._v("树、森林用二叉链表的形式存储（孩子兄弟表示法）")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("先根遍历")]),t._v(" "),a("td",[t._v("先序遍历")]),t._v(" "),a("td",[t._v("先序遍历")])]),t._v(" "),a("tr",[a("td",[t._v("后根遍历")]),t._v(" "),a("td",[t._v("中序遍历、后序遍历")]),t._v(" "),a("td",[t._v("中序遍历")])])])]),t._v(" "),a("h3",{attrs:{id:"哈夫曼树与哈夫曼编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈夫曼树与哈夫曼编码"}},[t._v("#")]),t._v(" 哈夫曼树与哈夫曼编码")]),t._v(" "),a("h4",{attrs:{id:"哈夫曼树的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈夫曼树的基本概念"}},[t._v("#")]),t._v(" 哈夫曼树的基本概念")]),t._v(" "),a("ul",[a("li",[t._v("结点间路径长度(Path Length)：连接两结点的路径上的分支数")]),t._v(" "),a("li",[t._v("结点的路径长度：从根结点到该结点的路径上分支的数目")]),t._v(" "),a("li",[t._v("树的路径长度：树中每个结点的路径长度之和")]),t._v(" "),a("li",[t._v("树的带权路径长度 (Weighted Path Length, WPL)：树的各叶结点所带的权值与该 结点到根的路径长度的乘积的和")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109221435076.png",alt:"image-20201109221435076"}})]),t._v(" "),a("ul",[a("li",[t._v("哈夫曼树：在所有含n个叶子结点、并带相同权值的m叉树中，必存在一棵其带权路径长度取最小值的树，称为 “最优树” , 或“哈夫曼树” (Huffman Tree)")]),t._v(" "),a("li",[t._v("具有不同带权路径长度的二叉树")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109221531962.png",alt:"image-20201109221531962"}})]),t._v(" "),a("center",[t._v("WPL(T)= 7×2×2+2×3+ 4×3+9×2=60")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109221657694.png",alt:"image-20201109221657694"}})]),t._v(" "),a("center",[t._v("WPL(T)= 7×4+9×4+5×3+ 4×2+2×1=89 ")]),t._v(" "),a("p",[t._v("哈夫曼树中，权值越大的结点离根越近")]),t._v(" "),a("h4",{attrs:{id:"构造哈夫曼树的算法-以二叉树为例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造哈夫曼树的算法-以二叉树为例"}},[t._v("#")]),t._v(" 构造哈夫曼树的算法 (以二叉树为例)")]),t._v(" "),a("ol",[a("li",[t._v("根据给定的 n 个权值 {w"),a("sub",[t._v("1")]),t._v(" , w"),a("sub",[t._v("2")]),t._v(", …, w"),a("sub",[t._v("n")]),t._v("}，构造 n 棵二叉树的集合 F = {T"),a("sub",[t._v("1")]),t._v(" , T"),a("sub",[t._v("2 ")]),t._v(", … , T"),a("sub",[t._v("n")]),t._v("}， 其中二叉树T"),a("sub",[t._v("i")]),t._v("中均只含一个带权值为 w"),a("sub",[t._v("i")]),t._v(" 的根结点，其左、右子树为空树(i=1，2，…，n)；")]),t._v(" "),a("li",[t._v("在 F 中选取其根结点的权值为最小的两棵二叉树，分别作为左、 右子树构造一棵新的二叉树，并置这棵新的二叉树根结点的权值为其左、右子树根结点的权值之和；")]),t._v(" "),a("li",[t._v("从F中删去这两棵树，同时加入刚生成的新树")]),t._v(" "),a("li",[t._v("重复 (2) 和 (3) 两步，直至 F 中只含一棵树为止")])]),t._v(" "),a("h4",{attrs:{id:"前缀编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前缀编码"}},[t._v("#")]),t._v(" 前缀编码")]),t._v(" "),a("p",[t._v("任何一个字符的编码都不是同一字符集中另一个字符的编码的前缀")]),t._v(" "),a("p",[t._v("利用哈夫曼树可以构造一种不等 长的二进制编码，并且构造所得的哈 夫曼编码是一种最优前缀编码，使得 编码的总长度最短")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109222142933.png",alt:"image-20201109222142933"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("设给出一段报文\nCAST CAST SAT AT A TASA\n字符集合是 { C, A, S, T }，各个字符\n出现的频度(次数)是 W＝{ 2, 7, 4, 5 }\n若给每个字符以等长编码\nA : 00 T : 10 C : 01 S : 11\n则总编码长度为2*2+7*2+4*2+5*2=36\n")])])]),a("p",[t._v("以各字符出现概率{2,7,4,5}为各叶结 权值，建立哈夫曼树，得哈夫曼编码(不 等长编码) A:0 T:10 C:110 S:111 总编码长度为 7"),a("em",[t._v("1+5")]),t._v("2+2"),a("em",[t._v("3+4")]),t._v("3=35 总编码长度正好等于哈夫曼树的带权路径长度WPL")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ds_school/img/image-20201109222237146.png",alt:"image-20201109222237146"}})])],1)}),[],!1,null,null,null);s.default=e.exports}}]);